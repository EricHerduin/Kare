{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/recipe.service\";\nimport * as i3 from \"src/app/services/shared.service\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = function (a0, a1) {\n  return {\n    grey: a0,\n    white: a1\n  };\n};\nfunction RecipeListComponent_table_3_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 6);\n    i0.ɵɵlistener(\"click\", function RecipeListComponent_table_3_tr_12_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const recipe_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.onViewRecipe(recipe_r3.id));\n    });\n    i0.ɵɵelementStart(1, \"td\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 8);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 7);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const recipe_r3 = ctx.$implicit;\n    const even_r4 = ctx.even;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c0, even_r4, !even_r4));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", recipe_r3.id, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", recipe_r3.title, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", recipe_r3.dietbookIds, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", recipe_r3.online ? \"En Ligne\" : \"\", \" \");\n  }\n}\nfunction RecipeListComponent_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 2)(1, \"thead\", 3)(2, \"tr\", 3)(3, \"th\", 4);\n    i0.ɵɵtext(4, \"N\\u00B0\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\", 4);\n    i0.ɵɵtext(6, \"Nom de la recette\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\", 4);\n    i0.ɵɵtext(8, \"Livret\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\", 4);\n    i0.ɵɵtext(10, \"En ligne\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, RecipeListComponent_table_3_tr_12_Template, 9, 8, \"tr\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const recipes_r1 = ctx.ngIf;\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", recipes_r1);\n  }\n}\nexport class RecipeListComponent {\n  constructor(router, recipe, route, sharedService) {\n    this.router = router;\n    this.recipe = recipe;\n    this.route = route;\n    this.sharedService = sharedService;\n  }\n  ngOnInit() {\n    this.recipes$ = this.recipe.getAllRecipes();\n    this.sharedService.setTextHeader(\"Liste des Recettes\");\n  }\n  onViewRecipe(recipeId) {\n    this.router.navigateByUrl(`recipebook?recipeId=${recipeId}`);\n  }\n  onNewRecipe() {\n    this.router.navigateByUrl(\"add_recipe_book\");\n  }\n  static #_ = this.ɵfac = function RecipeListComponent_Factory(t) {\n    return new (t || RecipeListComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.RecipeService), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i3.SharedService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RecipeListComponent,\n    selectors: [[\"app-recipe-list\"]],\n    decls: 5,\n    vars: 3,\n    consts: [[3, \"click\"], [\"class\", \"dietList_table\", 4, \"ngIf\"], [1, \"dietList_table\"], [1, \"dietList_array\", \"title\"], [1, \"dietList_table-title\"], [\"class\", \"dietList_table-row cursor group\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"dietList_table-row\", \"cursor\", \"group\", 3, \"ngClass\", \"click\"], [1, \"dietList_table-cell\"], [1, \"dietList_table-cell\", \"book-title\"]],\n    template: function RecipeListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0);\n        i0.ɵɵelementStart(1, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function RecipeListComponent_Template_button_click_1_listener() {\n          return ctx.onNewRecipe();\n        });\n        i0.ɵɵtext(2, \"Nouvelle Recette\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, RecipeListComponent_table_3_Template, 13, 1, \"table\", 1);\n        i0.ɵɵpipe(4, \"async\");\n        i0.ɵɵelementContainerEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(4, 1, ctx.recipes$));\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.AsyncPipe],\n    styles: [\".mdc-checkbox[_ngcontent-%COMP%] {\\n  padding: calc((40px - 18px) / 2);\\n  \\n  padding: calc((var(--mdc-checkbox-ripple-size, 40px) - 18px) / 2);\\n  margin: calc((40px - 40px) / 2);\\n  \\n  margin: calc((var(--mdc-checkbox-touch-target-size, 40px) - 40px) / 2);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  background-color: #000;\\n  \\n  background-color: var(--mdc-ripple-color, #000);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]:hover   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-ripple-surface--hover[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  opacity: 0.04;\\n  \\n  opacity: var(--mdc-ripple-hover-opacity, 0.04);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  transition-duration: 75ms;\\n  opacity: 0.12;\\n  \\n  opacity: var(--mdc-ripple-focus-opacity, 0.12);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded)   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  transition: opacity 150ms linear;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):active   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  transition-duration: 75ms;\\n  opacity: 0.12;\\n  \\n  opacity: var(--mdc-ripple-press-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%] {\\n  --mdc-ripple-fg-opacity: var(--mdc-ripple-press-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  background-color: #018786;\\n  \\n  background-color: var(--mdc-ripple-color, var(--mdc-theme-secondary, #018786));\\n}\\n.mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]:hover   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-checkbox--selected.mdc-ripple-surface--hover[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  opacity: 0.04;\\n  \\n  opacity: var(--mdc-ripple-hover-opacity, 0.04);\\n}\\n.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  transition-duration: 75ms;\\n  opacity: 0.12;\\n  \\n  opacity: var(--mdc-ripple-focus-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded)   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  transition: opacity 150ms linear;\\n}\\n.mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):active   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  transition-duration: 75ms;\\n  opacity: 0.12;\\n  \\n  opacity: var(--mdc-ripple-press-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded[_ngcontent-%COMP%] {\\n  --mdc-ripple-fg-opacity: var(--mdc-ripple-press-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  background-color: #018786;\\n  \\n  background-color: var(--mdc-ripple-color, var(--mdc-theme-secondary, #018786));\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  top: calc((40px - 18px) / 2);\\n  \\n  top: calc((var(--mdc-checkbox-ripple-size, 40px) - 18px) / 2);\\n  left: calc((40px - 18px) / 2);\\n  \\n  left: calc((var(--mdc-checkbox-ripple-size, 40px) - 18px) / 2);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%] {\\n  top: calc((40px - 40px) / 2);\\n  \\n  top: calc((40px - var(--mdc-checkbox-touch-target-size, 40px)) / 2);\\n  right: calc((40px - 40px) / 2);\\n  \\n  right: calc((40px - var(--mdc-checkbox-touch-target-size, 40px)) / 2);\\n  left: calc((40px - 40px) / 2);\\n  \\n  left: calc((40px - var(--mdc-checkbox-touch-target-size, 40px)) / 2);\\n  width: 40px;\\n  \\n  width: var(--mdc-checkbox-touch-target-size, 40px);\\n  height: 40px;\\n  \\n  height: var(--mdc-checkbox-touch-target-size, 40px);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  border-color: rgba(0, 0, 0, 0.54);\\n  \\n  border-color: var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));\\n  background-color: transparent;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  border-color: #018786;\\n  \\n  border-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n  background-color: #018786;\\n  \\n  background-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-fade-in-background-8A000000FF01878600000000FF018786 {\\n  0% {\\n    border-color: rgba(0, 0, 0, 0.54);\\n    \\n    border-color: var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));\\n    background-color: transparent;\\n  }\\n  50% {\\n    border-color: #018786;\\n    \\n    border-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n    background-color: #018786;\\n    \\n    background-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-fade-out-background-8A000000FF01878600000000FF018786 {\\n  0%, 80% {\\n    border-color: #018786;\\n    \\n    border-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n    background-color: #018786;\\n    \\n    background-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n  }\\n  100% {\\n    border-color: rgba(0, 0, 0, 0.54);\\n    \\n    border-color: var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));\\n    background-color: transparent;\\n  }\\n}\\n.mdc-checkbox.mdc-checkbox--anim-unchecked-checked[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--anim-unchecked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  animation-name: _ngcontent-%COMP%_mdc-checkbox-fade-in-background-8A000000FF01878600000000FF018786;\\n}\\n.mdc-checkbox.mdc-checkbox--anim-checked-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--anim-indeterminate-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  animation-name: _ngcontent-%COMP%_mdc-checkbox-fade-out-background-8A000000FF01878600000000FF018786;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[disabled][_ngcontent-%COMP%]:not(:checked):not(:indeterminate):not([data-indeterminate=true])    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  border-color: rgba(0, 0, 0, 0.38);\\n  \\n  border-color: var(--mdc-checkbox-disabled-color, rgba(0, 0, 0, 0.38));\\n  background-color: transparent;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[disabled][_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[disabled][_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[data-indeterminate=true][disabled][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  border-color: transparent;\\n  background-color: rgba(0, 0, 0, 0.38);\\n  \\n  background-color: var(--mdc-checkbox-disabled-color, rgba(0, 0, 0, 0.38));\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  color: #fff;\\n  \\n  color: var(--mdc-checkbox-ink-color, #fff);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  border-color: #fff;\\n  \\n  border-color: var(--mdc-checkbox-ink-color, #fff);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:disabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  color: #fff;\\n  \\n  color: var(--mdc-checkbox-ink-color, #fff);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:disabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  border-color: #fff;\\n  \\n  border-color: var(--mdc-checkbox-ink-color, #fff);\\n}\\n\\n.mdc-touch-target-wrapper[_ngcontent-%COMP%] {\\n  display: inline;\\n}\\n\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-unchecked-checked-checkmark-path {\\n  0%, 50% {\\n    stroke-dashoffset: 29.7833385;\\n  }\\n  50% {\\n    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\\n  }\\n  100% {\\n    stroke-dashoffset: 0;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-unchecked-indeterminate-mixedmark {\\n  0%, 68.2% {\\n    transform: scaleX(0);\\n  }\\n  68.2% {\\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\\n  }\\n  100% {\\n    transform: scaleX(1);\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-checked-unchecked-checkmark-path {\\n  from {\\n    animation-timing-function: cubic-bezier(0.4, 0, 1, 1);\\n    opacity: 1;\\n    stroke-dashoffset: 0;\\n  }\\n  to {\\n    opacity: 0;\\n    stroke-dashoffset: -29.7833385;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-checked-indeterminate-checkmark {\\n  from {\\n    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\\n     \\n    transform: rotate(0deg);\\n    opacity: 1;\\n  }\\n  to {\\n     \\n    transform: rotate(45deg);\\n    opacity: 0;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-indeterminate-checked-checkmark {\\n  from {\\n    animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\\n     \\n    transform: rotate(45deg);\\n    opacity: 0;\\n  }\\n  to {\\n     \\n    transform: rotate(360deg);\\n    opacity: 1;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-checked-indeterminate-mixedmark {\\n  from {\\n    animation-timing-function: mdc-animation-deceleration-curve-timing-function;\\n     \\n    transform: rotate(-45deg);\\n    opacity: 0;\\n  }\\n  to {\\n     \\n    transform: rotate(0deg);\\n    opacity: 1;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-indeterminate-checked-mixedmark {\\n  from {\\n    animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\\n     \\n    transform: rotate(0deg);\\n    opacity: 1;\\n  }\\n  to {\\n     \\n    transform: rotate(315deg);\\n    opacity: 0;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-indeterminate-unchecked-mixedmark {\\n  0% {\\n    animation-timing-function: linear;\\n    transform: scaleX(1);\\n    opacity: 1;\\n  }\\n  32.8%, 100% {\\n    transform: scaleX(0);\\n    opacity: 0;\\n  }\\n}\\n.mdc-checkbox[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  position: relative;\\n  flex: 0 0 18px;\\n  box-sizing: content-box;\\n  width: 18px;\\n  height: 18px;\\n  line-height: 0;\\n  white-space: nowrap;\\n  cursor: pointer;\\n  vertical-align: bottom;\\n}\\n.mdc-checkbox[hidden][_ngcontent-%COMP%] {\\n  display: none;\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__focus-ring[_ngcontent-%COMP%] {\\n  pointer-events: none;\\n  border: 2px solid transparent;\\n  border-radius: 6px;\\n  box-sizing: content-box;\\n  position: absolute;\\n  top: 50%;\\n   \\n  left: 50%;\\n   \\n  transform: translate(-50%, -50%);\\n  height: 100%;\\n  width: 100%;\\n}\\n@media screen and (forced-colors: active) {\\n  .mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__focus-ring[_ngcontent-%COMP%] {\\n    border-color: CanvasText;\\n  }\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%]::after, .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__focus-ring[_ngcontent-%COMP%]::after {\\n  content: \\\"\\\";\\n  border: 2px solid transparent;\\n  border-radius: 8px;\\n  display: block;\\n  position: absolute;\\n  top: 50%;\\n   \\n  left: 50%;\\n   \\n  transform: translate(-50%, -50%);\\n  height: calc(100% + 4px);\\n  width: calc(100% + 4px);\\n}\\n@media screen and (forced-colors: active) {\\n  .mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%]::after, .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__focus-ring[_ngcontent-%COMP%]::after {\\n    border-color: CanvasText;\\n  }\\n}\\n@media all and (-ms-high-contrast: none) {\\n  .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%] {\\n    display: none;\\n  }\\n}\\n\\n@media screen and (forced-colors: active), (-ms-high-contrast: active) {\\n  .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n    margin: 0 1px;\\n  }\\n}\\n.mdc-checkbox--disabled[_ngcontent-%COMP%] {\\n  cursor: default;\\n  pointer-events: none;\\n}\\n\\n.mdc-checkbox__background[_ngcontent-%COMP%] {\\n  display: inline-flex;\\n  position: absolute;\\n  align-items: center;\\n  justify-content: center;\\n  box-sizing: border-box;\\n  width: 18px;\\n  height: 18px;\\n  border: 2px solid currentColor;\\n  border-radius: 2px;\\n  background-color: transparent;\\n  pointer-events: none;\\n  will-change: background-color, border-color;\\n  transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n}\\n\\n.mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  opacity: 0;\\n  transition: opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n}\\n.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  opacity: 1;\\n}\\n\\n.mdc-checkbox__checkmark-path[_ngcontent-%COMP%] {\\n  transition: stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n  stroke: currentColor;\\n  stroke-width: 3.12px;\\n  stroke-dashoffset: 29.7833385;\\n  stroke-dasharray: 29.7833385;\\n}\\n\\n.mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 0;\\n   \\n  transform: scaleX(0) rotate(0deg);\\n  border-width: 1px;\\n  border-style: solid;\\n  opacity: 0;\\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n}\\n\\n.mdc-checkbox--anim-unchecked-checked[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox--anim-unchecked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox--anim-checked-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox--anim-indeterminate-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  animation-duration: 180ms;\\n  animation-timing-function: linear;\\n}\\n.mdc-checkbox--anim-unchecked-checked[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-unchecked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-checked-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-checked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-checked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-indeterminate-checked[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-indeterminate-checked[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-indeterminate-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;\\n  transition: none;\\n}\\n\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox__native-control[_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  transition: border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%], .mdc-checkbox__native-control[_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%], .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%] {\\n  stroke-dashoffset: 0;\\n}\\n\\n.mdc-checkbox__native-control[_ngcontent-%COMP%] {\\n  position: absolute;\\n  margin: 0;\\n  padding: 0;\\n  opacity: 0;\\n  cursor: inherit;\\n}\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:disabled {\\n  cursor: default;\\n  pointer-events: none;\\n}\\n\\n.mdc-checkbox--touch[_ngcontent-%COMP%] {\\n  margin: calc((48px - 40px) / 2);\\n  \\n  margin: calc((var(--mdc-checkbox-state-layer-size, 48px) - var(--mdc-checkbox-state-layer-size, 40px)) / 2);\\n}\\n.mdc-checkbox--touch[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%] {\\n  top: calc((40px - 48px) / 2);\\n  \\n  top: calc((var(--mdc-checkbox-state-layer-size, 40px) - var(--mdc-checkbox-state-layer-size, 48px)) / 2);\\n  right: calc((40px - 48px) / 2);\\n  \\n  right: calc((var(--mdc-checkbox-state-layer-size, 40px) - var(--mdc-checkbox-state-layer-size, 48px)) / 2);\\n  left: calc((40px - 48px) / 2);\\n  \\n  left: calc((var(--mdc-checkbox-state-layer-size, 40px) - var(--mdc-checkbox-state-layer-size, 48px)) / 2);\\n  width: 48px;\\n  \\n  width: var(--mdc-checkbox-state-layer-size, 48px);\\n  height: 48px;\\n  \\n  height: var(--mdc-checkbox-state-layer-size, 48px);\\n}\\n\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);\\n  opacity: 1;\\n}\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n   \\n  transform: scaleX(1) rotate(-45deg);\\n}\\n\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%], .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n   \\n  transform: rotate(45deg);\\n  opacity: 0;\\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n}\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%], .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n   \\n  transform: scaleX(1) rotate(0deg);\\n  opacity: 1;\\n}\\n\\n.mdc-checkbox.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  transition: none;\\n}\\n\\n@keyframes _ngcontent-%COMP%_mdc-ripple-fg-radius-in {\\n  from {\\n    animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\\n  }\\n  to {\\n    transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-ripple-fg-opacity-in {\\n  from {\\n    animation-timing-function: linear;\\n    opacity: 0;\\n  }\\n  to {\\n    opacity: var(--mdc-ripple-fg-opacity, 0);\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-ripple-fg-opacity-out {\\n  from {\\n    animation-timing-function: linear;\\n    opacity: var(--mdc-ripple-fg-opacity, 0);\\n  }\\n  to {\\n    opacity: 0;\\n  }\\n}\\n.mdc-checkbox[_ngcontent-%COMP%] {\\n  --mdc-ripple-fg-size: 0;\\n  --mdc-ripple-left: 0;\\n  --mdc-ripple-top: 0;\\n  --mdc-ripple-fg-scale: 1;\\n  --mdc-ripple-fg-translate-end: 0;\\n  --mdc-ripple-fg-translate-start: 0;\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n  will-change: transform, opacity;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  position: absolute;\\n  border-radius: 50%;\\n  opacity: 0;\\n  pointer-events: none;\\n  content: \\\"\\\";\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  transition: opacity 15ms linear, background-color 15ms linear;\\n  z-index: 1;\\n  \\n  z-index: var(--mdc-ripple-z-index, 1);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  z-index: 0;\\n  \\n  z-index: var(--mdc-ripple-z-index, 0);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  transform: scale(var(--mdc-ripple-fg-scale, 1));\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  top: 0;\\n   \\n  left: 0;\\n  transform: scale(0);\\n  transform-origin: center center;\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--unbounded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  top: var(--mdc-ripple-top, 0);\\n   \\n  left: var(--mdc-ripple-left, 0);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--foreground-activation[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  animation: _ngcontent-%COMP%_mdc-ripple-fg-radius-in 225ms forwards, _ngcontent-%COMP%_mdc-ripple-fg-opacity-in 75ms forwards;\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--foreground-deactivation[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  animation: _ngcontent-%COMP%_mdc-ripple-fg-opacity-out 150ms;\\n  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  top: calc(50% - 50%);\\n   \\n  left: calc(50% - 50%);\\n  width: 100%;\\n  height: 100%;\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  top: var(--mdc-ripple-top, calc(50% - 50%));\\n   \\n  left: var(--mdc-ripple-left, calc(50% - 50%));\\n  width: var(--mdc-ripple-fg-size, 100%);\\n  height: var(--mdc-ripple-fg-size, 100%);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  width: var(--mdc-ripple-fg-size, 100%);\\n  height: var(--mdc-ripple-fg-size, 100%);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%] {\\n  z-index: 0;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  z-index: -1;\\n  \\n  z-index: var(--mdc-ripple-z-index, -1);\\n}\\n\\n.mdc-checkbox__ripple[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  pointer-events: none;\\n}\\n\\n.mdc-form-field[_ngcontent-%COMP%] {\\n  -moz-osx-font-smoothing: grayscale;\\n  -webkit-font-smoothing: antialiased;\\n  font-family: Roboto, sans-serif;\\n  \\n  font-family: var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));\\n  font-size: 0.875rem;\\n  \\n  font-size: var(--mdc-typography-body2-font-size, 0.875rem);\\n  line-height: 1.25rem;\\n  \\n  line-height: var(--mdc-typography-body2-line-height, 1.25rem);\\n  font-weight: 400;\\n  \\n  font-weight: var(--mdc-typography-body2-font-weight, 400);\\n  letter-spacing: 0.0178571429em;\\n  \\n  letter-spacing: var(--mdc-typography-body2-letter-spacing, 0.0178571429em);\\n  text-decoration: inherit;\\n  \\n  -webkit-text-decoration: var(--mdc-typography-body2-text-decoration, inherit);\\n          text-decoration: var(--mdc-typography-body2-text-decoration, inherit);\\n  text-transform: inherit;\\n  \\n  text-transform: var(--mdc-typography-body2-text-transform, inherit);\\n  color: rgba(0, 0, 0, 0.87);\\n  \\n  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));\\n  display: inline-flex;\\n  align-items: center;\\n  vertical-align: middle;\\n}\\n.mdc-form-field[hidden][_ngcontent-%COMP%] {\\n  display: none;\\n}\\n.mdc-form-field[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%] {\\n   \\n  margin-left: 0;\\n   \\n  margin-right: auto;\\n   \\n  padding-left: 4px;\\n   \\n  padding-right: 0;\\n  order: 0;\\n}\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n   \\n  margin-left: auto;\\n   \\n  margin-right: 0;\\n  \\n}\\n\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n   \\n  padding-left: 0;\\n   \\n  padding-right: 4px;\\n  \\n}\\n\\n.mdc-form-field--nowrap[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%] {\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n  white-space: nowrap;\\n}\\n\\n.mdc-form-field--align-end[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%] {\\n   \\n  margin-left: auto;\\n   \\n  margin-right: 0;\\n   \\n  padding-left: 0;\\n   \\n  padding-right: 4px;\\n  order: -1;\\n}\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field--align-end[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field--align-end[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n   \\n  margin-left: 0;\\n   \\n  margin-right: auto;\\n  \\n}\\n\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field--align-end[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field--align-end[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n   \\n  padding-left: 4px;\\n   \\n  padding-right: 0;\\n  \\n}\\n\\n.mdc-form-field--space-between[_ngcontent-%COMP%] {\\n  justify-content: space-between;\\n}\\n.mdc-form-field--space-between[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%] {\\n  margin: 0;\\n}\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field--space-between[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field--space-between[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n  margin: 0;\\n  \\n}\\n\\n.dietList_table[_ngcontent-%COMP%] {\\n  position: relative;\\n  width: 80%;\\n  margin: 0 auto;\\n}\\n.dietList_table-title[_ngcontent-%COMP%]:nth-of-type(1) {\\n  width: 8%;\\n}\\n.dietList_table-title[_ngcontent-%COMP%]:nth-of-type(3) {\\n  width: 22%;\\n}\\n.dietList_table.cards[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  width: 100%;\\n  height: 30px;\\n  line-height: 0;\\n  text-align: center;\\n  background-color: lightgray;\\n}\\n\\n.book-title[_ngcontent-%COMP%] {\\n  text-align: left;\\n  padding-left: 20px;\\n}\\n\\n.list[_ngcontent-%COMP%], .title[_ngcontent-%COMP%] {\\n  margin: 0 auto;\\n  width: 100%;\\n}\\n\\n.title[_ngcontent-%COMP%] {\\n  background-color: rgb(88, 20, 20);\\n  color: white;\\n  font-size: 20px;\\n  height: 40px;\\n  line-height: 0;\\n  border-bottom: 2px solid white;\\n}\\n\\n.white[_ngcontent-%COMP%] {\\n  background-color: white;\\n  border: grey 1px solid;\\n}\\n\\n.grey[_ngcontent-%COMP%] {\\n  background-color: rgb(203, 202, 202);\\n}\\n\\n.cursor[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  position: relative;\\n  left: 36%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;IAsCMA,6BAKC;IAFCA;MAAA;MAAA;MAAA;MAAA,OAASA,gDAAuB;IAAA,EAAC;IAGjCA,6BAAgC;IAC9BA,YACF;IAAAA,iBAAK;IACLA,6BAA2C;IACzCA,YACF;IAAAA,iBAAK;IACLA,6BAAgC;IAC9BA,YACF;IAAAA,iBAAK;IACLA,6BAAgC;IAC9BA,YACF;IAAAA,iBAAK;;;;;IAbLA,uEAAwC;IAGtCA,eACF;IADEA,6CACF;IAEEA,eACF;IADEA,gDACF;IAEEA,eACF;IADEA,sDACF;IAEEA,eACF;IADEA,mEACF;;;;;IA3BNA,gCAAkE;IAG3BA,uBAAE;IAAAA,iBAAK;IACxCA,6BAAiC;IAAAA,iCAAiB;IAAAA,iBAAK;IACvDA,6BAAiC;IAAAA,sBAAM;IAAAA,iBAAK;IAC5CA,6BAAiC;IAAAA,yBAAQ;IAAAA,iBAAK;IAGlDA,8BAAO;IACLA,4EAkBK;IACPA,iBAAQ;;;;IAjBeA,gBAAY;IAAZA,oCAAY;;;AC5BvC,OAAM,MAAOC,mBAAmB;EAI9BC,YACUC,MAAc,EACdC,MAAqB,EACrBC,KAAqB,EACrBC,aAA4B;IAH5B,WAAM,GAANH,MAAM;IACN,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IACL,kBAAa,GAAbC,aAAa;EACpB;EAEHC,QAAQ;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACJ,MAAM,CAACK,aAAa,EAAE;IAC3C,IAAI,CAACH,aAAa,CAACI,aAAa,CAAC,oBAAoB,CAAC;EACxD;EAEAC,YAAY,CAACC,QAAgB;IAC3B,IAAI,CAACT,MAAM,CAACU,aAAa,CAAC,uBAAuBD,QAAQ,EAAE,CAAC;EAC9D;EAEAE,WAAW;IACT,IAAI,CAACX,MAAM,CAACU,aAAa,CAAC,iBAAiB,CAAC;EAC9C;EAAC;qBAtBUZ,mBAAmB;EAAA;EAAA;UAAnBA,mBAAmB;IAAAc;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDahCnB,6BAAc;QACZA,iCAAgC;QAAxBA;UAAA,OAASoB,iBAAa;QAAA,EAAC;QAACpB,gCAAgB;QAAAA,iBAAS;QAEzDA,yEA8BQ;;QACVA,0BAAe;;;QA/BkBA,eAAuB;QAAvBA,yDAAuB","names":["i0","RecipeListComponent","constructor","router","recipe","route","sharedService","ngOnInit","recipes$","getAllRecipes","setTextHeader","onViewRecipe","recipeId","navigateByUrl","onNewRecipe","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/livrets/recipe/recipe-list/recipe-list.component.html","/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/livrets/recipe/recipe-list/recipe-list.component.ts"],"sourcesContent":["<!-- <ng-container>\n  <button (click)=\"onNewRecipe()\">Nouvelle Recette</button>\n  <div class=\"recipe_array title\">\n    <p class=\"recipe_array-title\">N°</p>\n    <p class=\"recipe_array-title\">Nom de la recette</p>\n    <p class=\"recipe_array-title\">Livret</p>\n  </div>\n  <div class=\"recipe_array\" *ngIf=\"recipes$ | async as recipes\">\n    <div\n      class=\"recipe_array list\"\n      *ngFor=\"let recipe of recipes; let even = even\"\n    >\n      <div\n        class=\"recipe_array cards cursor group\"\n        [ngClass]=\"{ white: even }\"\n        (click)=\"onViewRecipe(recipe.id)\"\n      >\n        <p class=\"recipe_array-card--id cardwidth\">{{ recipe.id }}</p>\n        <p class=\"recipe_array-card--title cardwidth\">{{ recipe.title }}</p>\n        <p class=\"recipe_array-card--title cardwidth\">{{ recipe.livret }}</p>\n      </div>\n    </div>\n  </div>\n</ng-container> -->\n\n<ng-container>\n  <button (click)=\"onNewRecipe()\">Nouvelle Recette</button>\n\n  <table class=\"dietList_table\" *ngIf=\"recipes$ | async as recipes\">\n    <thead class=\"dietList_array title\">\n      <tr class=\"dietList_array title\">\n        <th class=\"dietList_table-title\">N°</th>\n        <th class=\"dietList_table-title\">Nom de la recette</th>\n        <th class=\"dietList_table-title\">Livret</th>\n        <th class=\"dietList_table-title\">En ligne</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        class=\"dietList_table-row cursor group\"\n        *ngFor=\"let recipe of recipes; let even = even\"\n        (click)=\"onViewRecipe(recipe.id)\"\n        [ngClass]=\"{ grey: even, white: !even }\"\n      >\n        <td class=\"dietList_table-cell\">\n          {{ recipe.id }}\n        </td>\n        <td class=\"dietList_table-cell book-title\">\n          {{ recipe.title }}\n        </td>\n        <td class=\"dietList_table-cell\">\n          {{ recipe.dietbookIds }}\n        </td>\n        <td class=\"dietList_table-cell\">\n          {{ recipe.online ? \"En Ligne\" : \"\" }}\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</ng-container>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { Recipe } from \"src/app/models/recipe.model\";\nimport { RecipeService } from \"src/app/services/recipe.service\";\nimport { SharedService } from \"src/app/services/shared.service\";\n\n@Component({\n  selector: \"app-recipe-list\",\n  templateUrl: \"./recipe-list.component.html\",\n  styleUrls: [\"./recipe-list.component.scss\"],\n})\nexport class RecipeListComponent implements OnInit {\n  recipes$!: Observable<Recipe[]>;\n  showElement!: boolean;\n\n  constructor(\n    private router: Router,\n    private recipe: RecipeService,\n    private route: ActivatedRoute,\n    private sharedService: SharedService\n  ) {}\n\n  ngOnInit() {\n    this.recipes$ = this.recipe.getAllRecipes();\n    this.sharedService.setTextHeader(\"Liste des Recettes\");\n  }\n\n  onViewRecipe(recipeId: string) {\n    this.router.navigateByUrl(`recipebook?recipeId=${recipeId}`);\n  }\n\n  onNewRecipe() {\n    this.router.navigateByUrl(\"add_recipe_book\");\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}