{"ast":null,"code":"import { BehaviorSubject, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isAuth$ = new BehaviorSubject(false);\n    this.userRole$ = new BehaviorSubject(null);\n    this.userName$ = new BehaviorSubject(null);\n    this.authToken = \"\";\n    this.userId = \"\";\n    // Vérifie si un authToken est déjà présent dans le local storage\n    const storedToken = localStorage.getItem(\"authToken\");\n    if (storedToken && this.isTokenValid(storedToken)) {\n      // Si un authToken valide est présent, met à jour les informations d'authentification\n      this.authToken = storedToken;\n      this.isAuth$.next(true);\n    }\n  }\n  createUser(email, password) {\n    return this.http.post(\"http://localhost:5400/api/signup\", {\n      email: email,\n      password: password\n    });\n  }\n  isTokenValid(token) {\n    this.authToken = token;\n    return token.length > 0;\n  }\n  getToken() {\n    return this.authToken;\n  }\n  getUserId() {\n    return this.userId;\n  }\n  loginUser(email, password) {\n    return this.http.post(\"http://localhost:5400/api/auth/login\", {\n      email: email,\n      password: password\n    }).pipe(tap(({\n      userId,\n      token,\n      role,\n      name\n    }) => {\n      this.userId = userId;\n      // Vérifie si un authToken est déjà présent et valide\n      const storedToken = localStorage.getItem(\"authToken\");\n      if (!storedToken || !this.isTokenValid(storedToken)) {\n        // Si un authToken n'est pas présent ou n'est pas valide, enregistre le token\n        this.authToken = token;\n        localStorage.setItem(\"authToken\", this.authToken);\n      }\n      this.userRole$.next(role);\n      this.userName$.next(name);\n      console.log(this.userName$, this.userRole$);\n      this.isAuth$.next(true);\n    }));\n  }\n  logout() {\n    this.authToken = \"\";\n    this.userId = \"\";\n    localStorage.removeItem(\"authToken\");\n    this.isAuth$.next(false);\n    this.router.navigate([\"login\"]);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAEC,GAAG,QAAQ,MAAM;;;;AAO3C,OAAM,MAAOC,WAAW;EAStBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IARpD,YAAO,GAAG,IAAIL,eAAe,CAAU,KAAK,CAAC;IAC7C,cAAS,GAAG,IAAIA,eAAe,CAAgB,IAAI,CAAC;IAEpD,cAAS,GAAG,IAAIA,eAAe,CAAgB,IAAI,CAAC;IAE5C,cAAS,GAAG,EAAE;IACd,WAAM,GAAG,EAAE;IAGjB;IACA,MAAMM,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACrD,IAAIF,WAAW,IAAI,IAAI,CAACG,YAAY,CAACH,WAAW,CAAC,EAAE;MACjD;MACA,IAAI,CAACI,SAAS,GAAGJ,WAAW;MAC5B,IAAI,CAACK,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;;EAE3B;EAEAC,UAAU,CAACC,KAAa,EAAEC,QAAgB;IACxC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CACnB,kCAAkC,EAClC;MAAEF,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAE,CACrC;EACH;EAEAN,YAAY,CAACQ,KAAa;IACxB,IAAI,CAACP,SAAS,GAAGO,KAAK;IACtB,OAAOA,KAAK,CAACC,MAAM,GAAG,CAAC;EACzB;EAEAC,QAAQ;IACN,OAAO,IAAI,CAACT,SAAS;EACvB;EAEAU,SAAS;IACP,OAAO,IAAI,CAACC,MAAM;EACpB;EAEAC,SAAS,CAACR,KAAa,EAAEC,QAAgB;IACvC,OAAO,IAAI,CAACX,IAAI,CACbY,IAAI,CAAM,sCAAsC,EAAE;MACjDF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;KACX,CAAC,CACDQ,IAAI,CACHtB,GAAG,CAAC,CAAC;MAAEoB,MAAM;MAAEJ,KAAK;MAAEO,IAAI;MAAEC;IAAI,CAAE,KAAI;MACpC,IAAI,CAACJ,MAAM,GAAGA,MAAM;MACpB;MACA,MAAMf,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACrD,IAAI,CAACF,WAAW,IAAI,CAAC,IAAI,CAACG,YAAY,CAACH,WAAW,CAAC,EAAE;QACnD;QACA,IAAI,CAACI,SAAS,GAAGO,KAAK;QACtBV,YAAY,CAACmB,OAAO,CAAC,WAAW,EAAE,IAAI,CAAChB,SAAS,CAAC;;MAEnD,IAAI,CAACiB,SAAS,CAACf,IAAI,CAACY,IAAI,CAAC;MACzB,IAAI,CAACI,SAAS,CAAChB,IAAI,CAACa,IAAI,CAAC;MACzBI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,SAAS,EAAE,IAAI,CAACD,SAAS,CAAC;MAC3C,IAAI,CAAChB,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;IACzB,CAAC,CAAC,CACH;EACL;EAEAmB,MAAM;IACJ,IAAI,CAACrB,SAAS,GAAG,EAAE;IACnB,IAAI,CAACW,MAAM,GAAG,EAAE;IAEhBd,YAAY,CAACyB,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAACrB,OAAO,CAACC,IAAI,CAAC,KAAK,CAAC;IACxB,IAAI,CAACP,MAAM,CAAC4B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;EAAC;qBAtEU/B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAgC,SAAXhC,WAAW;IAAAiC,YAFV;EAAM","names":["BehaviorSubject","tap","AuthService","constructor","http","router","storedToken","localStorage","getItem","isTokenValid","authToken","isAuth$","next","createUser","email","password","post","token","length","getToken","getUserId","userId","loginUser","pipe","role","name","setItem","userRole$","userName$","console","log","logout","removeItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { BehaviorSubject, tap } from \"rxjs\";\nimport { Router } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n  isAuth$ = new BehaviorSubject<boolean>(false);\n  userRole$ = new BehaviorSubject<number | null>(null);\n\n  userName$ = new BehaviorSubject<string | null>(null);\n\n  private authToken = \"\";\n  private userId = \"\";\n\n  constructor(private http: HttpClient, private router: Router) {\n    // Vérifie si un authToken est déjà présent dans le local storage\n    const storedToken = localStorage.getItem(\"authToken\");\n    if (storedToken && this.isTokenValid(storedToken)) {\n      // Si un authToken valide est présent, met à jour les informations d'authentification\n      this.authToken = storedToken;\n      this.isAuth$.next(true);\n    }\n  }\n\n  createUser(email: string, password: string) {\n    return this.http.post<{ message: string }>(\n      \"http://localhost:5400/api/signup\",\n      { email: email, password: password }\n    );\n  }\n\n  isTokenValid(token: string): boolean {\n    this.authToken = token;\n    return token.length > 0;\n  }\n\n  getToken() {\n    return this.authToken;\n  }\n\n  getUserId() {\n    return this.userId;\n  }\n\n  loginUser(email: string, password: string) {\n    return this.http\n      .post<any>(\"http://localhost:5400/api/auth/login\", {\n        email: email,\n        password: password,\n      })\n      .pipe(\n        tap(({ userId, token, role, name }) => {\n          this.userId = userId;\n          // Vérifie si un authToken est déjà présent et valide\n          const storedToken = localStorage.getItem(\"authToken\");\n          if (!storedToken || !this.isTokenValid(storedToken)) {\n            // Si un authToken n'est pas présent ou n'est pas valide, enregistre le token\n            this.authToken = token;\n            localStorage.setItem(\"authToken\", this.authToken);\n          }\n          this.userRole$.next(role);\n          this.userName$.next(name);\n          console.log(this.userName$, this.userRole$);\n          this.isAuth$.next(true);\n        })\n      );\n  }\n\n  logout() {\n    this.authToken = \"\";\n    this.userId = \"\";\n\n    localStorage.removeItem(\"authToken\");\n    this.isAuth$.next(false);\n    this.router.navigate([\"login\"]);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}