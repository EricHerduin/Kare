{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { catchError, EMPTY, tap, shareReplay } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_form_3_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.errorMsg);\n  }\n}\nfunction LoginComponent_form_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 1)(1, \"div\", 2)(2, \"label\", 3);\n    i0.ɵɵtext(3, \"Email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 2)(6, \"label\", 5);\n    i0.ɵɵtext(7, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function LoginComponent_form_3_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onLogin());\n    });\n    i0.ɵɵtext(10, \" LOGIN \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, LoginComponent_form_3_p_11_Template, 2, 1, \"p\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.loginForm);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.loginForm.invalid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMsg);\n  }\n}\nexport class LoginComponent {\n  constructor(formBuilder, auth, router) {\n    this.formBuilder = formBuilder;\n    this.auth = auth;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.isAuth$ = this.auth.isAuth$.pipe(shareReplay(1));\n    this.loginForm = this.formBuilder.group({\n      email: [null, [Validators.required, Validators.email]],\n      password: [null, Validators.required]\n    });\n  }\n  onLogin() {\n    this.loading = true;\n    const email = this.loginForm.get(\"email\").value;\n    const password = this.loginForm.get(\"password\").value;\n    this.auth.loginUser(email, password).pipe(tap(response => {\n      this.loading = false;\n      const userRole = response.role;\n      if (userRole === 2) {\n        this.router.navigate([\"/home\"]);\n      } else if (userRole === 0 || userRole === 1) {\n        this.router.navigate([\"/homepage\"]);\n      }\n    }), catchError(error => {\n      this.loading = false;\n      if (error.message && error.error.passwordExpired) {\n        this.errorMsg = \"Mot de passe expiré. veuillez réinitialiser votre mot de passe\";\n      } else {\n        this.errorMsg = error.message;\n      }\n      return EMPTY;\n    })).subscribe();\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 4,\n    vars: 1,\n    consts: [[3, \"formGroup\", 4, \"ngIf\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n        i0.ɵɵtext(2, \"Authentification\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(3, LoginComponent_form_3_Template, 12, 3, \"form\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"form[_ngcontent-%COMP%] {\\n  margin: 2em auto;\\n  max-width: 750px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8uLy4uLy4uLy4uL1NpdGUlMjBXZWIvQkQyJTIwS29uZWN0L0Zyb250ZW5kL3NyYy9hcHAvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0VBQ0EsZ0JBQUE7QUNDRiIsInNvdXJjZXNDb250ZW50IjpbImZvcm0ge1xuICBtYXJnaW46IDJlbSBhdXRvO1xuICBtYXgtd2lkdGg6IDc1MHB4O1xufVxuIiwiZm9ybSB7XG4gIG1hcmdpbjogMmVtIGF1dG87XG4gIG1heC13aWR0aDogNzUwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAGnE,SAASC,UAAU,EAAEC,KAAK,EAAcC,GAAG,EAAEC,WAAW,QAAQ,MAAM;;;;;;;;IC2BpEC,4BAAwC;IAAAA,YAAc;IAAAA,iBAAI;;;;IAAlBA,eAAc;IAAdA,qCAAc;;;;;;IA3BxDA,+BAA+C;IAExBA,qBAAK;IAAAA,iBAAQ;IAChCA,2BAKE;IACJA,iBAAM;IACNA,8BAAwB;IACAA,wBAAQ;IAAAA,iBAAQ;IACtCA,2BAKE;IACJA,iBAAM;IACNA,iCAKC;IADCA;MAAAA;MAAA;MAAA,OAASA,+BAAS;IAAA,EAAC;IAEnBA,wBACF;IAAAA,iBAAS;IACTA,oEAA0D;IAC5DA,iBAAO;;;;IA5BDA,4CAAuB;IAsBzBA,eAA8B;IAA9BA,mDAA8B;IAKRA,eAAc;IAAdA,sCAAc;;;ADpBxC,OAAM,MAAOC,cAAc;EAMzBC,YACUC,WAAwB,EACxBC,IAAiB,EACjBC,MAAc;IAFd,gBAAW,GAAXF,WAAW;IACX,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;EACb;EAEHC,QAAQ;IACN,IAAI,CAACC,OAAO,GAAG,IAAI,CAACH,IAAI,CAACG,OAAO,CAACC,IAAI,CAACT,WAAW,CAAC,CAAC,CAAC,CAAC;IACrD,IAAI,CAACU,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAChB,UAAU,CAACiB,QAAQ,EAAEjB,UAAU,CAACgB,KAAK,CAAC,CAAC;MACtDE,QAAQ,EAAE,CAAC,IAAI,EAAElB,UAAU,CAACiB,QAAQ;KACrC,CAAC;EACJ;EAEAE,OAAO;IACL,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,MAAMJ,KAAK,GAAG,IAAI,CAACF,SAAS,CAACO,GAAG,CAAC,OAAO,CAAE,CAACC,KAAK;IAChD,MAAMJ,QAAQ,GAAG,IAAI,CAACJ,SAAS,CAACO,GAAG,CAAC,UAAU,CAAE,CAACC,KAAK;IACtD,IAAI,CAACb,IAAI,CACNc,SAAS,CAACP,KAAK,EAAEE,QAAQ,CAAC,CAC1BL,IAAI,CACHV,GAAG,CAAEqB,QAAQ,IAAI;MACf,IAAI,CAACJ,OAAO,GAAG,KAAK;MACpB,MAAMK,QAAQ,GAAGD,QAAQ,CAACE,IAAI;MAE9B,IAAID,QAAQ,KAAK,CAAC,EAAE;QAClB,IAAI,CAACf,MAAM,CAACiB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;OAChC,MAAM,IAAIF,QAAQ,KAAK,CAAC,IAAIA,QAAQ,KAAK,CAAC,EAAE;QAC3C,IAAI,CAACf,MAAM,CAACiB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;;IAEvC,CAAC,CAAC,EACF1B,UAAU,CAAE2B,KAAK,IAAI;MACnB,IAAI,CAACR,OAAO,GAAG,KAAK;MACpB,IAAIQ,KAAK,CAACC,OAAO,IAAID,KAAK,CAACA,KAAK,CAACE,eAAe,EAAE;QAChD,IAAI,CAACC,QAAQ,GACX,gEAAgE;OACnE,MAAM;QACL,IAAI,CAACA,QAAQ,GAAGH,KAAK,CAACC,OAAO;;MAE/B,OAAO3B,KAAK;IACd,CAAC,CAAC,CACH,CACA8B,SAAS,EAAE;EAChB;EAAC;qBAjDU1B,cAAc;EAAA;EAAA;UAAdA,cAAc;IAAA2B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCX3BhC,2BAAK;QACCA,gCAAgB;QAAAA,iBAAK;QAG3BA,kEA4BO;;;QA5BwBA,eAAc;QAAdA,mCAAc","names":["Validators","catchError","EMPTY","tap","shareReplay","i0","LoginComponent","constructor","formBuilder","auth","router","ngOnInit","isAuth$","pipe","loginForm","group","email","required","password","onLogin","loading","get","value","loginUser","response","userRole","role","navigate","error","message","passwordExpired","errorMsg","subscribe","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/auth/login/login.component.ts","/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/auth/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"src/app/services/auth.service\";\nimport { Router } from \"@angular/router\";\nimport { catchError, EMPTY, Observable, tap, shareReplay } from \"rxjs\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"],\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n  loading!: boolean;\n  errorMsg!: string;\n  isAuth$!: Observable<boolean>;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private auth: AuthService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.isAuth$ = this.auth.isAuth$.pipe(shareReplay(1));\n    this.loginForm = this.formBuilder.group({\n      email: [null, [Validators.required, Validators.email]],\n      password: [null, Validators.required],\n    });\n  }\n\n  onLogin() {\n    this.loading = true;\n    const email = this.loginForm.get(\"email\")!.value;\n    const password = this.loginForm.get(\"password\")!.value;\n    this.auth\n      .loginUser(email, password)\n      .pipe(\n        tap((response) => {\n          this.loading = false;\n          const userRole = response.role;\n\n          if (userRole === 2) {\n            this.router.navigate([\"/home\"]);\n          } else if (userRole === 0 || userRole === 1) {\n            this.router.navigate([\"/homepage\"]);\n          }\n        }),\n        catchError((error) => {\n          this.loading = false;\n          if (error.message && error.error.passwordExpired) {\n            this.errorMsg =\n              \"Mot de passe expiré. veuillez réinitialiser votre mot de passe\";\n          } else {\n            this.errorMsg = error.message;\n          }\n          return EMPTY;\n        })\n      )\n      .subscribe();\n  }\n}\n\n// import { Component, OnInit } from \"@angular/core\";\n// import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n// import { AuthService } from \"src/app/services/auth.service\";\n// import { Router } from \"@angular/router\";\n// import { catchError, EMPTY, Observable, tap, shareReplay } from \"rxjs\";\n\n// @Component({\n//   selector: \"app-login\",\n//   templateUrl: \"./login.component.html\",\n//   styleUrls: [\"./login.component.scss\"],\n// })\n// export class LoginComponent implements OnInit {\n//   loginForm!: FormGroup;\n//   loading!: boolean;\n//   errorMsg!: string;\n//   isAuth$!: Observable<boolean>;\n\n//   constructor(\n//     private formBuilder: FormBuilder,\n//     private auth: AuthService,\n//     private router: Router\n//   ) {}\n\n//   ngOnInit() {\n//     // Vérifie s'il y a un token dans le local storage\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//       // Redirige l'utilisateur vers la page souhaitée (par exemple, \"/dietbooks\")\n//       this.router.navigate([\"/dietbooks\"]);\n//       return;\n//     }\n\n//     // S'il n'y a pas de token, initialise le formulaire de connexion\n//     this.isAuth$ = this.auth.isAuth$.pipe(shareReplay(1));\n//     this.loginForm = this.formBuilder.group({\n//       email: [null, [Validators.required, Validators.email]],\n//       password: [null, Validators.required],\n//     });\n//   }\n\n//   onLogin() {\n//     this.loading = true;\n//     const email = this.loginForm.get(\"email\")!.value;\n//     const password = this.loginForm.get(\"password\")!.value;\n//     this.auth\n//       .loginUser(email, password)\n//       .pipe(\n//         tap((response) => {\n//           const token = response.token; // Extrait le token de la réponse\n//           this.loading = false;\n//           // Enregistre le token dans le local storage\n//           localStorage.setItem('token', token);\n//           this.router.navigate([\"/dietbooks\"]);\n//         }),\n//         catchError((error) => {\n//           this.loading = false;\n//           this.errorMsg = error.message;\n//           return EMPTY;\n//         })\n//       )\n//       .subscribe();\n//   }\n// }\n","<div>\n  <h1>Authentification</h1>\n</div>\n\n<form [formGroup]=\"loginForm\" *ngIf=\"!loading\">\n  <div class=\"form-group\">\n    <label for=\"email\">Email</label>\n    <input\n      type=\"email\"\n      class=\"form-control\"\n      id=\"email\"\n      formControlName=\"email\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"password\">Password</label>\n    <input\n      type=\"password\"\n      class=\"form-control\"\n      id=\"password\"\n      formControlName=\"password\"\n    />\n  </div>\n  <button\n    mat-raised-button\n    color=\"primary\"\n    [disabled]=\"loginForm.invalid\"\n    (click)=\"onLogin()\"\n  >\n    LOGIN\n  </button>\n  <p class=\"text-danger\" *ngIf=\"errorMsg\">{{ errorMsg }}</p>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}