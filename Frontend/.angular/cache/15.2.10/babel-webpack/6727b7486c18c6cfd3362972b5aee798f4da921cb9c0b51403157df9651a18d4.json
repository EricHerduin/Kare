{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { ConfirmationDialogComponent } from \"src/app/core/confirmation-dialog/confirmation-dialog.component\";\nimport { catchError, EMPTY } from \"rxjs\";\nimport { switchMap, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/diet-book.service\";\nimport * as i4 from \"src/app/services/meal.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"src/app/services/snackBar.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/radio\";\nimport * as i9 from \"../../../directive/autofocus.directive\";\nfunction MealformComponent_div_0_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function MealformComponent_div_0_button_6_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const meal_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.onClickButtonMeal(meal_r5));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const meal_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"active\", ctx_r1.selectedOption == meal_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", meal_r5, \" \");\n  }\n}\nfunction MealformComponent_div_0_span_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\")(1, \"input\", 21);\n    i0.ɵɵlistener(\"change\", function MealformComponent_div_0_span_23_Template_input_change_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const i_r8 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.onCheckBoxChange(i_r8, $event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", \"stage\" + i_r8)(\"checked\", ctx_r2.selectedStages.includes(i_r8));\n  }\n}\nfunction MealformComponent_div_0_div_24_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 24)(2, \"label\", 25);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 26);\n    i0.ɵɵelementStart(5, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function MealformComponent_div_0_div_24_div_1_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const i_r13 = restoredCtx.index;\n      const ctx_r14 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r14.removeCollation(i_r13));\n    });\n    i0.ɵɵtext(6, \"-\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const i_r13 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"collation\", i_r13, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Collation \", i_r13 + 1, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", \"collationList\" + i_r13);\n  }\n}\nfunction MealformComponent_div_0_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, MealformComponent_div_0_div_24_div_1_Template, 7, 3, \"div\", 14);\n    i0.ɵɵelementStart(2, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function MealformComponent_div_0_div_24_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.addCollation());\n    });\n    i0.ɵɵtext(3, \"+\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.collationListControls);\n  }\n}\nfunction MealformComponent_div_0_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 2)(2, \"label\", 27);\n    i0.ɵɵtext(3, \"Viande\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 12);\n    i0.ɵɵelement(5, \"input\", 28);\n    i0.ɵɵelementStart(6, \"div\", 2)(7, \"label\", 29);\n    i0.ɵɵtext(8, \"Quantit\\u00E9 Viande\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\");\n    i0.ɵɵtext(11, \"gr.\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 31);\n    i0.ɵɵtext(14, \"Liste des viandes\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 12);\n    i0.ɵɵelement(16, \"input\", 32);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\", 2)(18, \"label\", 33);\n    i0.ɵɵtext(19, \"Sauce\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 12);\n    i0.ɵɵelement(21, \"input\", 34);\n    i0.ɵɵelementStart(22, \"p\");\n    i0.ɵɵtext(23, \"CS\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(24, \"div\", 2)(25, \"label\", 35);\n    i0.ɵɵtext(26, \"Accompagnement\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"div\", 12);\n    i0.ɵɵelement(28, \"input\", 36);\n    i0.ɵɵelementStart(29, \"label\", 37);\n    i0.ɵɵtext(30, \"Quantit\\u00E9 Acc.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(31, \"input\", 38);\n    i0.ɵɵelementStart(32, \"p\");\n    i0.ɵɵtext(33, \"CS\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(34, \"div\", 2)(35, \"label\", 39);\n    i0.ɵɵtext(36, \"Liste des Acc.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(37, \"div\", 12);\n    i0.ɵɵelement(38, \"input\", 40);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"div\", 2)(40, \"label\", 41);\n    i0.ɵɵtext(41, \"Boissons\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(42, \"div\", 12);\n    i0.ɵɵelement(43, \"input\", 42);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(44, \"div\", 43)(45, \"label\", 44);\n    i0.ɵɵtext(46, \"Observation\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(47, \"div\", 12);\n    i0.ɵɵelement(48, \"textarea\", 45);\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"fade-in\": a0,\n    hidden: a1\n  };\n};\nfunction MealformComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"form\", 1)(2, \"div\", 2)(3, \"label\", 3);\n    i0.ɵɵtext(4, \"Repas\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 4);\n    i0.ɵɵtemplate(6, MealformComponent_div_0_button_6_Template, 2, 3, \"button\", 5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 3);\n    i0.ɵɵtext(9, \"collation \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-radio-group\", 7)(11, \"mat-radio-button\", 8);\n    i0.ɵɵtext(12, \"AM\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-radio-button\", 9);\n    i0.ɵɵtext(14, \"PM1\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"mat-radio-button\", 10);\n    i0.ɵɵtext(16, \"PM2\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(17, \"div\", 2)(18, \"label\", 11);\n    i0.ɵɵtext(19, \"Semaine\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 12)(21, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function MealformComponent_div_0_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.toggleCheckAll());\n    });\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(23, MealformComponent_div_0_span_23_Template, 2, 2, \"span\", 14);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(24, MealformComponent_div_0_div_24_Template, 4, 1, \"div\", 15);\n    i0.ɵɵtemplate(25, MealformComponent_div_0_div_25_Template, 49, 0, \"div\", 0);\n    i0.ɵɵelementStart(26, \"div\", 16)(27, \"div\", 17)(28, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function MealformComponent_div_0_Template_button_click_28_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.onCancel());\n    });\n    i0.ɵɵtext(29, \"Retour\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(30, \"div\", 17)(31, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function MealformComponent_div_0_Template_button_click_31_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.openConfirmationDialog());\n    });\n    i0.ɵɵtext(32, \" Supprimer \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(33, \"div\", 17)(34, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function MealformComponent_div_0_Template_button_click_34_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.onSubmitForm());\n    });\n    i0.ɵɵtext(35, \"Enregistrer\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.dietMealForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.meals);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(7, _c0, ctx_r0.selectedOption === \"Collation\", ctx_r0.selectedOption !== \"Collation\"));\n    i0.ɵɵadvance(15);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.textCheckAll, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getRange(ctx_r0.stageNb));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.showMeal());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showMeal());\n  }\n}\nexport class MealformComponent {\n  constructor(formBuilder, router, dietBooks, mealService, route, dialog, messageService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.dietBooks = dietBooks;\n    this.mealService = mealService;\n    this.route = route;\n    this.dialog = dialog;\n    this.messageService = messageService;\n    this.collationListControls = [];\n    this.meals = [\"Petit-déjeuner\", \"Collation\", \"Déjeuner\", \"Diner\"];\n    this.cancelClicked = new EventEmitter();\n  }\n  ngOnInit() {\n    this.loading = true;\n    this.checkAll = false;\n    this.selectedStages = [];\n    this.initEmptyForm();\n    this.route.queryParams.pipe(switchMap(params => {\n      this.mealId = params[\"mealId\"];\n      this.dietBookId = params[\"dietId\"];\n      this.dietBooks.getDietBookById(this.dietBookId).subscribe(book => {\n        this.stageNb = book.nbStage;\n      });\n      if (this.mealId === \"addMeal\") {\n        this.mode = \"new\";\n        this.selectedStages = [];\n        this.initEmptyForm();\n        this.loading = false;\n        return EMPTY;\n      } else {\n        this.mode = \"edit\";\n        this.initEmptyForm();\n        return this.mealService.getMealById(params[\"mealId\"]);\n      }\n    }), tap(dietMeal => {\n      if (dietMeal) {\n        this.dietMeal = dietMeal;\n        this.selectedOption = dietMeal.typeMeal;\n        this.selectedStages = dietMeal.stage.map(k => Number(k));\n        this.initModifiyForm(dietMeal);\n      }\n    }), catchError(error => this.errorMsg = JSON.stringify(error))).subscribe();\n  }\n  onClickButtonMeal(name) {\n    this.selectedOption = name;\n    this.dietMealForm.patchValue({\n      typeMeal: name\n    });\n  }\n  getRange(stage) {\n    return Array(stage).fill(0).map((_, index) => index + 1);\n  }\n  toggleCheckAll() {\n    this.checkAll = !this.checkAll;\n    this.textCheckAll = this.checkAll ? \"Tout désélectionner\" : \"Tout sélectionner\";\n    // Réinitialiser le tableau\n    this.selectedStages = [];\n    // Générer un tableau de 0 à stageNb\n    const stagesRange = Array.from(Array(this.stageNb).keys());\n    // Transformer en tableau de nombres\n    const stagesNumbers = stagesRange.map(num => Number(num + 1));\n    console.log(stagesNumbers, this.checkAll);\n    // Assigner selon le statut de checkAll\n    this.selectedStages = this.checkAll ? stagesNumbers : [];\n  }\n  onCheckBoxChange(num, event) {\n    const checkbox = event.target;\n    if (checkbox.checked) {\n      this.selectedStages.push(num);\n    } else {\n      const index = this.selectedStages.indexOf(num);\n      if (index > -1) {\n        this.selectedStages.splice(index, 1);\n      }\n    }\n  }\n  showMeal() {\n    if (this.selectedOption === \"Déjeuner\" || this.selectedOption === \"Diner\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  initEmptyForm() {\n    this.dietMealForm = this.formBuilder.group({\n      typeMeal: new FormControl(\"\"),\n      collation: new FormControl(\"\"),\n      stage: new FormControl([], Validators.required),\n      meat: new FormControl(\"\"),\n      meatQuantity: new FormControl(\"180\"),\n      meatList: new FormControl(\"\"),\n      sauce: new FormControl(\"1\"),\n      sideDish: new FormControl(\"\"),\n      sideDishQuantity: new FormControl(\"4-5\"),\n      sideDishList: new FormControl(\"\"),\n      drink: new FormControl(\"\"),\n      obs: new FormControl(\"\"),\n      dietBookId: new FormControl(`${this.dietBookId}`),\n      id: new FormControl(\"0\"),\n      collationList: this.formBuilder.array([])\n    });\n    this.textCheckAll = \"Tout sélectionner\";\n  }\n  initModifiyForm(meal) {\n    this.dietMealForm = this.formBuilder.group({\n      id: meal.id,\n      typeMeal: meal.typeMeal,\n      collation: meal.collation,\n      collationList: this.formBuilder.array(meal.collationList),\n      stage: [meal.stage],\n      meat: meal.meat,\n      meatQuantity: meal.meatQuantity,\n      meatList: meal.meatList,\n      sauce: meal.sauce,\n      sideDish: meal.sideDish,\n      sideDishQuantity: meal.sideDishQuantity,\n      sideDishList: meal.sideDishList,\n      drink: meal.drink,\n      obs: meal.obs\n    });\n    if (this.selectedStages.length === this.stageNb) {\n      this.textCheckAll = \"Tout déselectionner\";\n    } else {\n      this.textCheckAll = \"Tout sélectionner\";\n    }\n    if (meal.collationList && meal.collationList.length > 0) {\n      const collationArray = this.dietMealForm.get(\"collationList\");\n      this.collationListControls = collationArray.controls.map(control => control);\n      meal.collationList.forEach((collation, index) => {\n        this.collationListControls[index].setValue(collation);\n      });\n    }\n  }\n  onCancel() {\n    this.cancelClicked.emit;\n    console.log(\"annulation dans mealForm\");\n    this.router.navigateByUrl(`dietbook?dietId=${this.dietBookId}`);\n  }\n  openConfirmationDialog() {\n    let message = \"Êtes-vous sûr de vouloir supprimer ce repas ?<br> cela entraînera la suppression définitive du repas et dans tous les semaines qui lui sont associées.\";\n    this.dialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      width: \"500px\",\n      data: {\n        message: message\n      },\n      panelClass: \"custom-dialog-container\"\n    });\n    this.dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.mealService.deleteMeal(this.mealId).pipe(tap(() => {\n          this.loading = false;\n          this.messageService.showMessage(\"Les Modifications sont bien enregistrées\");\n          this.router.navigateByUrl(`dietbook?dietId=${this.dietBookId}`);\n        }), catchError(error => {\n          console.error(error);\n          this.loading = false;\n          this.messageService.showErrorMessage(\"Une erreur s'est produite lors de la modification.\");\n          this.errorMsg = error.message;\n          return EMPTY;\n        })).subscribe();\n      }\n    });\n  }\n  addCollation() {\n    const newCollationControl = this.formBuilder.control(\"\");\n    this.collationListControls.push(newCollationControl);\n    this.dietMealForm.get(\"collationList\").push(newCollationControl);\n  }\n  removeCollation(index) {\n    this.collationListControls.splice(index, 1);\n    this.dietMealForm.get(\"collationList\").removeAt(index);\n  }\n  onSubmitForm() {\n    this.loading = true;\n    if (this.dietMealForm.value.stage !== this.selectedStages) {\n      this.dietMealForm.patchValue({\n        stage: []\n      });\n    }\n    this.dietMealForm.patchValue({\n      stage: this.selectedStages.sort((a, b) => a - b)\n    });\n    if (this.dietMealForm.value.typeMeal !== \"Collation\") {\n      this.dietMealForm.patchValue({\n        collation: \"\"\n      });\n    }\n    const collationListValues = this.collationListControls.map(control => control.value);\n    console.log(collationListValues);\n    const newDietMeal = {\n      id: this.dietMealForm.get(\"id\").value,\n      typeMeal: this.dietMealForm.get(\"typeMeal\").value,\n      collation: this.dietMealForm.get(\"collation\").value,\n      collationList: collationListValues,\n      stage: this.dietMealForm.get(\"stage\").value,\n      meat: this.dietMealForm.get(\"meat\").value,\n      meatList: this.dietMealForm.get(\"meatList\").value,\n      meatQuantity: this.dietMealForm.get(\"meatQuantity\").value,\n      sauce: this.dietMealForm.get(\"sauce\").value,\n      sideDish: this.dietMealForm.get(\"sideDish\").value,\n      sideDishQuantity: this.dietMealForm.get(\"sideDishQuantity\").value,\n      sideDishList: this.dietMealForm.get(\"sideDishList\").value,\n      drink: this.dietMealForm.get(\"drink\").value,\n      obs: this.dietMealForm.get(\"obs\").value,\n      dietBookId: this.dietBookId\n    };\n    if (this.mode === \"new\") {\n      this.mealService.addMeal(newDietMeal).pipe(tap(() => {\n        this.loading = false;\n        this.messageService.showMessage(\"Le repas a bien été créé\");\n        this.router.navigateByUrl(`dietbook?dietId=${this.dietBookId}`);\n      }), catchError(error => {\n        console.error(error);\n        this.loading = false;\n        this.messageService.showErrorMessage(\"Une erreur est survenue lors de la création\");\n        this.errorMsg = error.message;\n        return EMPTY;\n      })).subscribe();\n    } else if (this.mode === \"edit\") {\n      this.mealService.modifyDietMeal(this.mealId, newDietMeal).pipe(tap(() => {\n        this.loading = false;\n        this.messageService.showMessage(\"Le repas a bien été modifié\");\n        this.router.navigateByUrl(`dietbook?dietId=${this.dietBookId}`);\n      }), catchError(error => {\n        console.error(error);\n        this.loading = false;\n        this.messageService.showErrorMessage(\"Une erreur est survenue lors de la modification\");\n        this.errorMsg = error.message;\n        return EMPTY;\n      })).subscribe();\n    }\n  }\n  static #_ = this.ɵfac = function MealformComponent_Factory(t) {\n    return new (t || MealformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.DietBooksService), i0.ɵɵdirectiveInject(i4.mealService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i5.MatDialog), i0.ɵɵdirectiveInject(i6.MessageService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MealformComponent,\n    selectors: [[\"app-mealform\"]],\n    outputs: {\n      cancelClicked: \"cancelClicked\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [1, \"container-form\", 3, \"formGroup\"], [1, \"container\"], [\"for\", \"repas\", 1, \"label-col1\"], [\"formControlName\", \"typeMeal\", 1, \"container-input\"], [\"name\", \"buttonMeal\", 3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"container\", \"collation\", 3, \"ngClass\"], [\"formControlName\", \"collation\", 1, \"mat-radio-button\"], [\"value\", \"am\"], [\"value\", \"pm1\"], [\"value\", \"pm2\"], [\"for\", \"stage\", 1, \"label-col1\"], [1, \"container-input\"], [1, \"selectButton\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"collationList\", 4, \"ngIf\"], [1, \"container-buttons\"], [1, \"action-buttons\"], [\"type\", \"submit\", 3, \"click\"], [\"mat-raised-button\", \"\", 3, \"click\"], [\"name\", \"buttonMeal\", 3, \"click\"], [\"type\", \"checkbox\", 3, \"name\", \"checked\", \"change\"], [\"formArrayName\", \"collationList\"], [\"type\", \"button\", 3, \"click\"], [1, \"form-group\"], [3, \"for\"], [\"autofocus\", \"\", \"type\", \"text\", \"appAutofocus\", \"\", 3, \"formControlName\"], [\"for\", \"meat\", 1, \"label-col1\"], [\"formControlName\", \"meat\", \"id\", \"meat\", \"type\", \"text\", 1, \"input-col1\"], [\"for\", \"meatQuantity\", 1, \"label-col2\"], [\"id\", \"meatQuantity\", \"type\", \"text\", \"formControlName\", \"meatQuantity\", 1, \"input-col2\", \"quantity\"], [\"for\", \"meatList\", 1, \"label-col1\"], [\"id\", \"meatList\", \"type\", \"text\", \"formControlName\", \"meatList\", 1, \"input-col3\"], [\"for\", \"sauce\", 1, \"label-col1\"], [\"id\", \"sauce\", \"type\", \"text\", \"formControlName\", \"sauce\", 1, \"input-col1\", \"quantity\"], [\"for\", \"sideDish\", 1, \"label-col1\"], [\"id\", \"sideDish\", \"type\", \"text\", \"formControlName\", \"sideDish\", 1, \"input-col1\"], [\"for\", \"sideDishQuantity\", 1, \"label-col2\"], [\"id\", \"sideDishQuantity\", \"type\", \"text\", \"formControlName\", \"sideDishQuantity\", 1, \"input-col2\", \"quantity\"], [\"for\", \"sideDishList\", 1, \"label-col1\"], [\"id\", \"sideDishList\", \"type\", \"text\", \"formControlName\", \"sideDishList\", 1, \"input-col3\"], [\"for\", \"drink\", 1, \"label-col1\"], [\"id\", \"drink\", \"type\", \"text\", \"formControlName\", \"drink\", 1, \"input-col3\"], [1, \"container\", \"observation\"], [\"for\", \"obs\", 1, \"label-col1\", \"observation\"], [\"id\", \"obs\", \"type\", \"text\", \"formControlName\", \"obs\", 1, \"input-col3\"]],\n    template: function MealformComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MealformComponent_div_0_Template, 36, 10, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.mode);\n      }\n    },\n    dependencies: [i7.NgClass, i7.NgForOf, i7.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName, i8.MatRadioGroup, i8.MatRadioButton, i9.AutofocusDirective],\n    styles: [\"@charset \\\"UTF-8\\\";\\n.mdc-checkbox[_ngcontent-%COMP%] {\\n  padding: calc((40px - 18px) / 2);\\n  \\n  padding: calc((var(--mdc-checkbox-ripple-size, 40px) - 18px) / 2);\\n  margin: calc((40px - 40px) / 2);\\n  \\n  margin: calc((var(--mdc-checkbox-touch-target-size, 40px) - 40px) / 2);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  background-color: #000;\\n  \\n  background-color: var(--mdc-ripple-color, #000);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]:hover   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-ripple-surface--hover[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  opacity: 0.04;\\n  \\n  opacity: var(--mdc-ripple-hover-opacity, 0.04);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  transition-duration: 75ms;\\n  opacity: 0.12;\\n  \\n  opacity: var(--mdc-ripple-focus-opacity, 0.12);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded)   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  transition: opacity 150ms linear;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):active   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  transition-duration: 75ms;\\n  opacity: 0.12;\\n  \\n  opacity: var(--mdc-ripple-press-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%] {\\n  --mdc-ripple-fg-opacity: var(--mdc-ripple-press-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  background-color: #018786;\\n  \\n  background-color: var(--mdc-ripple-color, var(--mdc-theme-secondary, #018786));\\n}\\n.mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]:hover   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-checkbox--selected.mdc-ripple-surface--hover[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  opacity: 0.04;\\n  \\n  opacity: var(--mdc-ripple-hover-opacity, 0.04);\\n}\\n.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  transition-duration: 75ms;\\n  opacity: 0.12;\\n  \\n  opacity: var(--mdc-ripple-focus-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded)   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  transition: opacity 150ms linear;\\n}\\n.mdc-checkbox.mdc-checkbox--selected[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):active   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  transition-duration: 75ms;\\n  opacity: 0.12;\\n  \\n  opacity: var(--mdc-ripple-press-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded[_ngcontent-%COMP%] {\\n  --mdc-ripple-fg-opacity: var(--mdc-ripple-press-opacity, 0.12);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  background-color: #018786;\\n  \\n  background-color: var(--mdc-ripple-color, var(--mdc-theme-secondary, #018786));\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  top: calc((40px - 18px) / 2);\\n  \\n  top: calc((var(--mdc-checkbox-ripple-size, 40px) - 18px) / 2);\\n  left: calc((40px - 18px) / 2);\\n  \\n  left: calc((var(--mdc-checkbox-ripple-size, 40px) - 18px) / 2);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%] {\\n  top: calc((40px - 40px) / 2);\\n  \\n  top: calc((40px - var(--mdc-checkbox-touch-target-size, 40px)) / 2);\\n  right: calc((40px - 40px) / 2);\\n  \\n  right: calc((40px - var(--mdc-checkbox-touch-target-size, 40px)) / 2);\\n  left: calc((40px - 40px) / 2);\\n  \\n  left: calc((40px - var(--mdc-checkbox-touch-target-size, 40px)) / 2);\\n  width: 40px;\\n  \\n  width: var(--mdc-checkbox-touch-target-size, 40px);\\n  height: 40px;\\n  \\n  height: var(--mdc-checkbox-touch-target-size, 40px);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  border-color: rgba(0, 0, 0, 0.54);\\n  \\n  border-color: var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));\\n  background-color: transparent;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  border-color: #018786;\\n  \\n  border-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n  background-color: #018786;\\n  \\n  background-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-fade-in-background-8A000000FF01878600000000FF018786 {\\n  0% {\\n    border-color: rgba(0, 0, 0, 0.54);\\n    \\n    border-color: var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));\\n    background-color: transparent;\\n  }\\n  50% {\\n    border-color: #018786;\\n    \\n    border-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n    background-color: #018786;\\n    \\n    background-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-fade-out-background-8A000000FF01878600000000FF018786 {\\n  0%, 80% {\\n    border-color: #018786;\\n    \\n    border-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n    background-color: #018786;\\n    \\n    background-color: var(--mdc-checkbox-checked-color, var(--mdc-theme-secondary, #018786));\\n  }\\n  100% {\\n    border-color: rgba(0, 0, 0, 0.54);\\n    \\n    border-color: var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));\\n    background-color: transparent;\\n  }\\n}\\n.mdc-checkbox.mdc-checkbox--anim-unchecked-checked[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--anim-unchecked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  animation-name: _ngcontent-%COMP%_mdc-checkbox-fade-in-background-8A000000FF01878600000000FF018786;\\n}\\n.mdc-checkbox.mdc-checkbox--anim-checked-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--anim-indeterminate-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  animation-name: _ngcontent-%COMP%_mdc-checkbox-fade-out-background-8A000000FF01878600000000FF018786;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[disabled][_ngcontent-%COMP%]:not(:checked):not(:indeterminate):not([data-indeterminate=true])    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  border-color: rgba(0, 0, 0, 0.38);\\n  \\n  border-color: var(--mdc-checkbox-disabled-color, rgba(0, 0, 0, 0.38));\\n  background-color: transparent;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[disabled][_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[disabled][_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[data-indeterminate=true][disabled][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  border-color: transparent;\\n  background-color: rgba(0, 0, 0, 0.38);\\n  \\n  background-color: var(--mdc-checkbox-disabled-color, rgba(0, 0, 0, 0.38));\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  color: #fff;\\n  \\n  color: var(--mdc-checkbox-ink-color, #fff);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:enabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  border-color: #fff;\\n  \\n  border-color: var(--mdc-checkbox-ink-color, #fff);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:disabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  color: #fff;\\n  \\n  color: var(--mdc-checkbox-ink-color, #fff);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%]:disabled    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  border-color: #fff;\\n  \\n  border-color: var(--mdc-checkbox-ink-color, #fff);\\n}\\n\\n.mdc-touch-target-wrapper[_ngcontent-%COMP%] {\\n  display: inline;\\n}\\n\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-unchecked-checked-checkmark-path {\\n  0%, 50% {\\n    stroke-dashoffset: 29.7833385;\\n  }\\n  50% {\\n    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\\n  }\\n  100% {\\n    stroke-dashoffset: 0;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-unchecked-indeterminate-mixedmark {\\n  0%, 68.2% {\\n    transform: scaleX(0);\\n  }\\n  68.2% {\\n    animation-timing-function: cubic-bezier(0, 0, 0, 1);\\n  }\\n  100% {\\n    transform: scaleX(1);\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-checked-unchecked-checkmark-path {\\n  from {\\n    animation-timing-function: cubic-bezier(0.4, 0, 1, 1);\\n    opacity: 1;\\n    stroke-dashoffset: 0;\\n  }\\n  to {\\n    opacity: 0;\\n    stroke-dashoffset: -29.7833385;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-checked-indeterminate-checkmark {\\n  from {\\n    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\\n     \\n    transform: rotate(0deg);\\n    opacity: 1;\\n  }\\n  to {\\n     \\n    transform: rotate(45deg);\\n    opacity: 0;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-indeterminate-checked-checkmark {\\n  from {\\n    animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\\n     \\n    transform: rotate(45deg);\\n    opacity: 0;\\n  }\\n  to {\\n     \\n    transform: rotate(360deg);\\n    opacity: 1;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-checked-indeterminate-mixedmark {\\n  from {\\n    animation-timing-function: mdc-animation-deceleration-curve-timing-function;\\n     \\n    transform: rotate(-45deg);\\n    opacity: 0;\\n  }\\n  to {\\n     \\n    transform: rotate(0deg);\\n    opacity: 1;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-indeterminate-checked-mixedmark {\\n  from {\\n    animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\\n     \\n    transform: rotate(0deg);\\n    opacity: 1;\\n  }\\n  to {\\n     \\n    transform: rotate(315deg);\\n    opacity: 0;\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-checkbox-indeterminate-unchecked-mixedmark {\\n  0% {\\n    animation-timing-function: linear;\\n    transform: scaleX(1);\\n    opacity: 1;\\n  }\\n  32.8%, 100% {\\n    transform: scaleX(0);\\n    opacity: 0;\\n  }\\n}\\n.mdc-checkbox[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  position: relative;\\n  flex: 0 0 18px;\\n  box-sizing: content-box;\\n  width: 18px;\\n  height: 18px;\\n  line-height: 0;\\n  white-space: nowrap;\\n  cursor: pointer;\\n  vertical-align: bottom;\\n}\\n.mdc-checkbox[hidden][_ngcontent-%COMP%] {\\n  display: none;\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__focus-ring[_ngcontent-%COMP%] {\\n  pointer-events: none;\\n  border: 2px solid transparent;\\n  border-radius: 6px;\\n  box-sizing: content-box;\\n  position: absolute;\\n  top: 50%;\\n   \\n  left: 50%;\\n   \\n  transform: translate(-50%, -50%);\\n  height: 100%;\\n  width: 100%;\\n}\\n@media screen and (forced-colors: active) {\\n  .mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%], .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__focus-ring[_ngcontent-%COMP%] {\\n    border-color: CanvasText;\\n  }\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%]::after, .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__focus-ring[_ngcontent-%COMP%]::after {\\n  content: \\\"\\\";\\n  border: 2px solid transparent;\\n  border-radius: 8px;\\n  display: block;\\n  position: absolute;\\n  top: 50%;\\n   \\n  left: 50%;\\n   \\n  transform: translate(-50%, -50%);\\n  height: calc(100% + 4px);\\n  width: calc(100% + 4px);\\n}\\n@media screen and (forced-colors: active) {\\n  .mdc-checkbox.mdc-ripple-upgraded--background-focused[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%]::after, .mdc-checkbox[_ngcontent-%COMP%]:not(.mdc-ripple-upgraded):focus   .mdc-checkbox__focus-ring[_ngcontent-%COMP%]::after {\\n    border-color: CanvasText;\\n  }\\n}\\n@media all and (-ms-high-contrast: none) {\\n  .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__focus-ring[_ngcontent-%COMP%] {\\n    display: none;\\n  }\\n}\\n\\n@media screen and (forced-colors: active), (-ms-high-contrast: active) {\\n  .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n    margin: 0 1px;\\n  }\\n}\\n.mdc-checkbox--disabled[_ngcontent-%COMP%] {\\n  cursor: default;\\n  pointer-events: none;\\n}\\n\\n.mdc-checkbox__background[_ngcontent-%COMP%] {\\n  display: inline-flex;\\n  position: absolute;\\n  align-items: center;\\n  justify-content: center;\\n  box-sizing: border-box;\\n  width: 18px;\\n  height: 18px;\\n  border: 2px solid currentColor;\\n  border-radius: 2px;\\n  background-color: transparent;\\n  pointer-events: none;\\n  will-change: background-color, border-color;\\n  transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n}\\n\\n.mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  opacity: 0;\\n  transition: opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n}\\n.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  opacity: 1;\\n}\\n\\n.mdc-checkbox__checkmark-path[_ngcontent-%COMP%] {\\n  transition: stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n  stroke: currentColor;\\n  stroke-width: 3.12px;\\n  stroke-dashoffset: 29.7833385;\\n  stroke-dasharray: 29.7833385;\\n}\\n\\n.mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 0;\\n   \\n  transform: scaleX(0) rotate(0deg);\\n  border-width: 1px;\\n  border-style: solid;\\n  opacity: 0;\\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n}\\n\\n.mdc-checkbox--anim-unchecked-checked[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox--anim-unchecked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox--anim-checked-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox--anim-indeterminate-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  animation-duration: 180ms;\\n  animation-timing-function: linear;\\n}\\n.mdc-checkbox--anim-unchecked-checked[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-unchecked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-checked-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-checked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-checked-indeterminate[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-indeterminate-checked[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-indeterminate-checked[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;\\n  transition: none;\\n}\\n.mdc-checkbox--anim-indeterminate-unchecked[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;\\n  transition: none;\\n}\\n\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox__native-control[_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%] {\\n  transition: border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%], .mdc-checkbox__native-control[_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%], .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%] {\\n  stroke-dashoffset: 0;\\n}\\n\\n.mdc-checkbox__native-control[_ngcontent-%COMP%] {\\n  position: absolute;\\n  margin: 0;\\n  padding: 0;\\n  opacity: 0;\\n  cursor: inherit;\\n}\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:disabled {\\n  cursor: default;\\n  pointer-events: none;\\n}\\n\\n.mdc-checkbox--touch[_ngcontent-%COMP%] {\\n  margin: calc((48px - 40px) / 2);\\n  \\n  margin: calc((var(--mdc-checkbox-state-layer-size, 48px) - var(--mdc-checkbox-state-layer-size, 40px)) / 2);\\n}\\n.mdc-checkbox--touch[_ngcontent-%COMP%]   .mdc-checkbox__native-control[_ngcontent-%COMP%] {\\n  top: calc((40px - 48px) / 2);\\n  \\n  top: calc((var(--mdc-checkbox-state-layer-size, 40px) - var(--mdc-checkbox-state-layer-size, 48px)) / 2);\\n  right: calc((40px - 48px) / 2);\\n  \\n  right: calc((var(--mdc-checkbox-state-layer-size, 40px) - var(--mdc-checkbox-state-layer-size, 48px)) / 2);\\n  left: calc((40px - 48px) / 2);\\n  \\n  left: calc((var(--mdc-checkbox-state-layer-size, 40px) - var(--mdc-checkbox-state-layer-size, 48px)) / 2);\\n  width: 48px;\\n  \\n  width: var(--mdc-checkbox-state-layer-size, 48px);\\n  height: 48px;\\n  \\n  height: var(--mdc-checkbox-state-layer-size, 48px);\\n}\\n\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);\\n  opacity: 1;\\n}\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:checked    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n   \\n  transform: scaleX(1) rotate(-45deg);\\n}\\n\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%], .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%] {\\n   \\n  transform: rotate(45deg);\\n  opacity: 0;\\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\\n}\\n.mdc-checkbox__native-control[_ngcontent-%COMP%]:indeterminate    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%], .mdc-checkbox__native-control[data-indeterminate=true][_ngcontent-%COMP%]    ~ .mdc-checkbox__background[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n   \\n  transform: scaleX(1) rotate(0deg);\\n  opacity: 1;\\n}\\n\\n.mdc-checkbox.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__background[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__checkmark[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__checkmark-path[_ngcontent-%COMP%], .mdc-checkbox.mdc-checkbox--upgraded[_ngcontent-%COMP%]   .mdc-checkbox__mixedmark[_ngcontent-%COMP%] {\\n  transition: none;\\n}\\n\\n@keyframes _ngcontent-%COMP%_mdc-ripple-fg-radius-in {\\n  from {\\n    animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\n    transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\\n  }\\n  to {\\n    transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-ripple-fg-opacity-in {\\n  from {\\n    animation-timing-function: linear;\\n    opacity: 0;\\n  }\\n  to {\\n    opacity: var(--mdc-ripple-fg-opacity, 0);\\n  }\\n}\\n@keyframes _ngcontent-%COMP%_mdc-ripple-fg-opacity-out {\\n  from {\\n    animation-timing-function: linear;\\n    opacity: var(--mdc-ripple-fg-opacity, 0);\\n  }\\n  to {\\n    opacity: 0;\\n  }\\n}\\n.mdc-checkbox[_ngcontent-%COMP%] {\\n  --mdc-ripple-fg-size: 0;\\n  --mdc-ripple-left: 0;\\n  --mdc-ripple-top: 0;\\n  --mdc-ripple-fg-scale: 1;\\n  --mdc-ripple-fg-translate-end: 0;\\n  --mdc-ripple-fg-translate-start: 0;\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n  will-change: transform, opacity;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  position: absolute;\\n  border-radius: 50%;\\n  opacity: 0;\\n  pointer-events: none;\\n  content: \\\"\\\";\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  transition: opacity 15ms linear, background-color 15ms linear;\\n  z-index: 1;\\n  \\n  z-index: var(--mdc-ripple-z-index, 1);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  z-index: 0;\\n  \\n  z-index: var(--mdc-ripple-z-index, 0);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before {\\n  transform: scale(var(--mdc-ripple-fg-scale, 1));\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  top: 0;\\n   \\n  left: 0;\\n  transform: scale(0);\\n  transform-origin: center center;\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--unbounded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  top: var(--mdc-ripple-top, 0);\\n   \\n  left: var(--mdc-ripple-left, 0);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--foreground-activation[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  animation: _ngcontent-%COMP%_mdc-ripple-fg-radius-in 225ms forwards, _ngcontent-%COMP%_mdc-ripple-fg-opacity-in 75ms forwards;\\n}\\n.mdc-checkbox.mdc-ripple-upgraded--foreground-deactivation[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  animation: _ngcontent-%COMP%_mdc-ripple-fg-opacity-out 150ms;\\n  transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  top: calc(50% - 50%);\\n   \\n  left: calc(50% - 50%);\\n  width: 100%;\\n  height: 100%;\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  top: var(--mdc-ripple-top, calc(50% - 50%));\\n   \\n  left: var(--mdc-ripple-left, calc(50% - 50%));\\n  width: var(--mdc-ripple-fg-size, 100%);\\n  height: var(--mdc-ripple-fg-size, 100%);\\n}\\n.mdc-checkbox.mdc-ripple-upgraded[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  width: var(--mdc-ripple-fg-size, 100%);\\n  height: var(--mdc-ripple-fg-size, 100%);\\n}\\n.mdc-checkbox[_ngcontent-%COMP%] {\\n  z-index: 0;\\n}\\n.mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::before, .mdc-checkbox[_ngcontent-%COMP%]   .mdc-checkbox__ripple[_ngcontent-%COMP%]::after {\\n  z-index: -1;\\n  \\n  z-index: var(--mdc-ripple-z-index, -1);\\n}\\n\\n.mdc-checkbox__ripple[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  pointer-events: none;\\n}\\n\\n.mdc-form-field[_ngcontent-%COMP%] {\\n  -moz-osx-font-smoothing: grayscale;\\n  -webkit-font-smoothing: antialiased;\\n  font-family: Roboto, sans-serif;\\n  \\n  font-family: var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));\\n  font-size: 0.875rem;\\n  \\n  font-size: var(--mdc-typography-body2-font-size, 0.875rem);\\n  line-height: 1.25rem;\\n  \\n  line-height: var(--mdc-typography-body2-line-height, 1.25rem);\\n  font-weight: 400;\\n  \\n  font-weight: var(--mdc-typography-body2-font-weight, 400);\\n  letter-spacing: 0.0178571429em;\\n  \\n  letter-spacing: var(--mdc-typography-body2-letter-spacing, 0.0178571429em);\\n  text-decoration: inherit;\\n  \\n  -webkit-text-decoration: var(--mdc-typography-body2-text-decoration, inherit);\\n          text-decoration: var(--mdc-typography-body2-text-decoration, inherit);\\n  text-transform: inherit;\\n  \\n  text-transform: var(--mdc-typography-body2-text-transform, inherit);\\n  color: rgba(0, 0, 0, 0.87);\\n  \\n  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));\\n  display: inline-flex;\\n  align-items: center;\\n  vertical-align: middle;\\n}\\n.mdc-form-field[hidden][_ngcontent-%COMP%] {\\n  display: none;\\n}\\n.mdc-form-field[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%] {\\n   \\n  margin-left: 0;\\n   \\n  margin-right: auto;\\n   \\n  padding-left: 4px;\\n   \\n  padding-right: 0;\\n  order: 0;\\n}\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n   \\n  margin-left: auto;\\n   \\n  margin-right: 0;\\n  \\n}\\n\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n   \\n  padding-left: 0;\\n   \\n  padding-right: 4px;\\n  \\n}\\n\\n.mdc-form-field--nowrap[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%] {\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n  white-space: nowrap;\\n}\\n\\n.mdc-form-field--align-end[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%] {\\n   \\n  margin-left: auto;\\n   \\n  margin-right: 0;\\n   \\n  padding-left: 0;\\n   \\n  padding-right: 4px;\\n  order: -1;\\n}\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field--align-end[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field--align-end[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n   \\n  margin-left: 0;\\n   \\n  margin-right: auto;\\n  \\n}\\n\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field--align-end[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field--align-end[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n   \\n  padding-left: 4px;\\n   \\n  padding-right: 0;\\n  \\n}\\n\\n.mdc-form-field--space-between[_ngcontent-%COMP%] {\\n  justify-content: space-between;\\n}\\n.mdc-form-field--space-between[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%] {\\n  margin: 0;\\n}\\n[dir=rtl][_ngcontent-%COMP%]   .mdc-form-field--space-between[_ngcontent-%COMP%]    > label[_ngcontent-%COMP%], .mdc-form-field--space-between[_ngcontent-%COMP%]    > label[dir=rtl][_ngcontent-%COMP%] {\\n  \\n  margin: 0;\\n  \\n}\\n\\n*[_ngcontent-%COMP%] {\\n  box-sizing: border-box;\\n}\\n\\ninput[type=radio].type[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\ninput[type=radio].type[_ngcontent-%COMP%]    + label[_ngcontent-%COMP%] {\\n  padding: 0.3rem 0.5rem;\\n  margin: 0 10px 20px 10px;\\n  border: 1px solid #ccc;\\n}\\n\\ninput[type=radio].type[_ngcontent-%COMP%]:checked    + label[_ngcontent-%COMP%] {\\n  border: 1px solid #000;\\n  background-color: rgb(88, 20, 20);\\n  color: white;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  position: relative;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  height: 40px;\\n  align-items: center;\\n  justify-content: left;\\n}\\n.container-input[_ngcontent-%COMP%] {\\n  position: relative;\\n  width: 80%;\\n  height: 40px;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  align-items: center;\\n}\\n.container-form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-flow: column;\\n  justify-content: space-between;\\n  height: 100%;\\n}\\n.container-buttons[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-flow: row;\\n  justify-content: center;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  width: auto;\\n}\\n\\ntextarea[_ngcontent-%COMP%] {\\n  overflow-y: auto;\\n  height: 80px;\\n}\\n\\nlabel[_ngcontent-%COMP%] {\\n  width: 20%;\\n}\\n\\n.collation[_ngcontent-%COMP%] {\\n  height: 50px;\\n  margin-bottom: 0px;\\n  transition: height 10s ease-in-out;\\n}\\n\\n\\n.fade-in[_ngcontent-%COMP%] {\\n  opacity: 1;\\n  transition: opacity 0.5s ease-in;\\n}\\n\\n\\n.hidden[_ngcontent-%COMP%] {\\n  opacity: 0;\\n}\\n\\n.label-col1[_ngcontent-%COMP%] {\\n  width: 150px;\\n  text-align: left;\\n  height: 40px;\\n  line-height: 40px;\\n}\\n.label-col2[_ngcontent-%COMP%] {\\n  width: 150px;\\n  height: 20px;\\n}\\n\\n.input[_ngcontent-%COMP%] {\\n  font-size: 10px;\\n}\\n.input-col1[_ngcontent-%COMP%] {\\n  width: 95%;\\n}\\n.input-col2[_ngcontent-%COMP%] {\\n  width: 250px;\\n}\\n.input-col3[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\ninput[_ngcontent-%COMP%] {\\n  height: 20px;\\n  box-shadow: 2px 3px 10px gray;\\n}\\n\\n.quantity[_ngcontent-%COMP%] {\\n  width: 45px;\\n  margin-right: 10px;\\n  text-align: right;\\n}\\n\\n.observation[_ngcontent-%COMP%] {\\n  height: 80px;\\n  text-align: start;\\n  line-height: 20px;\\n}\\n\\n.button.active[_ngcontent-%COMP%] {\\n  background-color: white;\\n  color: rgb(88, 20, 20);\\n}\\n\\n.selectButton[_ngcontent-%COMP%] {\\n  width: 140px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","FormControl","Validators","ConfirmationDialogComponent","catchError","EMPTY","switchMap","tap","i0","MealformComponent","constructor","formBuilder","router","dietBooks","mealService","route","dialog","messageService","ngOnInit","loading","checkAll","selectedStages","initEmptyForm","queryParams","pipe","params","mealId","dietBookId","getDietBookById","subscribe","book","stageNb","nbStage","mode","getMealById","dietMeal","selectedOption","typeMeal","stage","map","k","Number","initModifiyForm","error","errorMsg","JSON","stringify","onClickButtonMeal","name","dietMealForm","patchValue","getRange","Array","fill","_","index","toggleCheckAll","textCheckAll","stagesRange","from","keys","stagesNumbers","num","console","log","onCheckBoxChange","event","checkbox","target","checked","push","indexOf","splice","showMeal","group","collation","required","meat","meatQuantity","meatList","sauce","sideDish","sideDishQuantity","sideDishList","drink","obs","id","collationList","array","meal","length","collationArray","get","collationListControls","controls","control","forEach","setValue","onCancel","cancelClicked","emit","navigateByUrl","openConfirmationDialog","message","dialogRef","open","width","data","panelClass","afterClosed","result","deleteMeal","showMessage","showErrorMessage","addCollation","newCollationControl","removeCollation","removeAt","onSubmitForm","value","sort","a","b","collationListValues","newDietMeal","addMeal","modifyDietMeal","selectors","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/livrets/diet/mealform/mealform.component.ts","/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/livrets/diet/mealform/mealform.component.html"],"sourcesContent":["import {\n  Component,\n  OnInit,\n  EventEmitter,\n  Output,\n  NgModule,\n} from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport {\n  FormBuilder,\n  FormGroup,\n  FormControl,\n  Validators,\n  FormsModule,\n  FormArray,\n} from \"@angular/forms\";\nimport { ConfirmationDialogComponent } from \"src/app/core/confirmation-dialog/confirmation-dialog.component\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { mealService } from \"src/app/services/meal.service\";\nimport { Meal } from \"src/app/models/meal.model\";\nimport { Observable, catchError, EMPTY } from \"rxjs\";\nimport { map, switchMap, tap } from \"rxjs/operators\";\nimport { MatRadioModule } from \"@angular/material/radio\";\nimport { MatCheckbox } from \"@angular/material/checkbox\";\nimport { DietBook } from \"src/app/models/diet.model\";\nimport { DietBooksService } from \"src/app/services/diet-book.service\";\nimport { MessageService } from \"src/app/services/snackBar.service\";\nimport { AutofocusDirective } from \"src/app/directive/autofocus.directive\";\n\n@Component({\n  selector: \"app-mealform\",\n  templateUrl: \"./mealform.component.html\",\n  styleUrls: [\"./mealform.component.scss\"],\n})\nexport class MealformComponent implements OnInit {\n  dietMealForm!: FormGroup;\n  collationListControls: FormControl[] = [];\n  dietMeal!: Meal;\n  errorMsg!: string;\n  mode!: string;\n  mealId!: string;\n  dietBookId!: string;\n  loading!: Boolean;\n  dietBook!: DietBook;\n  dietBook$!: Observable<DietBook>;\n  selectedOption!: string;\n  checkAll!: boolean;\n  selectedStages!: number[];\n  textCheckAll!: string;\n  stageNb!: number;\n  activeButton!: number;\n  meals: string[] = [\"Petit-déjeuner\", \"Collation\", \"Déjeuner\", \"Diner\"];\n  dialogRef!: any;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private dietBooks: DietBooksService,\n    private mealService: mealService,\n    private route: ActivatedRoute,\n    private dialog: MatDialog,\n    private messageService: MessageService\n  ) {}\n  @Output() cancelClicked: EventEmitter<void> = new EventEmitter<void>();\n\n  ngOnInit() {\n    this.loading = true;\n    this.checkAll = false;\n    this.selectedStages = [];\n    this.initEmptyForm();\n    this.route.queryParams\n      .pipe(\n        switchMap((params) => {\n          this.mealId = params[\"mealId\"];\n          this.dietBookId = params[\"dietId\"];\n          this.dietBooks.getDietBookById(this.dietBookId).subscribe((book) => {\n            this.stageNb = book.nbStage;\n          });\n          if (this.mealId === \"addMeal\") {\n            this.mode = \"new\";\n            this.selectedStages = [];\n            this.initEmptyForm();\n\n            this.loading = false;\n            return EMPTY;\n          } else {\n            this.mode = \"edit\";\n\n            this.initEmptyForm();\n            return this.mealService.getMealById(params[\"mealId\"]);\n          }\n        }),\n        tap((dietMeal) => {\n          if (dietMeal) {\n            this.dietMeal = dietMeal;\n            this.selectedOption = dietMeal.typeMeal;\n            this.selectedStages = dietMeal.stage.map((k) => Number(k));\n            this.initModifiyForm(dietMeal);\n          }\n        }),\n        catchError((error) => (this.errorMsg = JSON.stringify(error)))\n      )\n      .subscribe();\n  }\n\n  onClickButtonMeal(name: string) {\n    this.selectedOption = name;\n    this.dietMealForm.patchValue({\n      typeMeal: name,\n    });\n  }\n  getRange(stage: number): number[] {\n    return Array(stage)\n      .fill(0)\n      .map((_, index) => index + 1);\n  }\n\n  toggleCheckAll() {\n    this.checkAll = !this.checkAll;\n\n    this.textCheckAll = this.checkAll\n      ? \"Tout désélectionner\"\n      : \"Tout sélectionner\";\n\n    // Réinitialiser le tableau\n    this.selectedStages = [];\n\n    // Générer un tableau de 0 à stageNb\n    const stagesRange = Array.from(Array(this.stageNb).keys());\n\n    // Transformer en tableau de nombres\n    const stagesNumbers = stagesRange.map((num) => Number(num + 1));\n    console.log(stagesNumbers, this.checkAll);\n    // Assigner selon le statut de checkAll\n    this.selectedStages = this.checkAll ? stagesNumbers : [];\n  }\n\n  onCheckBoxChange(num: number, event: Event) {\n    const checkbox = event.target as HTMLInputElement;\n    if (checkbox.checked) {\n      this.selectedStages.push(num);\n    } else {\n      const index = this.selectedStages.indexOf(num);\n      if (index > -1) {\n        this.selectedStages.splice(index, 1);\n      }\n    }\n  }\n  showMeal() {\n    if (this.selectedOption === \"Déjeuner\" || this.selectedOption === \"Diner\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  initEmptyForm() {\n    this.dietMealForm = this.formBuilder.group({\n      typeMeal: new FormControl(\"\"),\n      collation: new FormControl(\"\"),\n      stage: new FormControl([], Validators.required),\n      meat: new FormControl(\"\"),\n      meatQuantity: new FormControl(\"180\"),\n      meatList: new FormControl(\"\"),\n      sauce: new FormControl(\"1\"),\n      sideDish: new FormControl(\"\"),\n      sideDishQuantity: new FormControl(\"4-5\"),\n      sideDishList: new FormControl(\"\"),\n      drink: new FormControl(\"\"),\n      obs: new FormControl(\"\"),\n      dietBookId: new FormControl(`${this.dietBookId}`),\n      id: new FormControl(\"0\"),\n      collationList: this.formBuilder.array([]),\n    });\n    this.textCheckAll = \"Tout sélectionner\";\n  }\n  initModifiyForm(meal: Meal) {\n    this.dietMealForm = this.formBuilder.group({\n      id: meal.id,\n      typeMeal: meal.typeMeal,\n      collation: meal.collation,\n      collationList: this.formBuilder.array(meal.collationList),\n      stage: [meal.stage],\n      meat: meal.meat,\n      meatQuantity: meal.meatQuantity,\n      meatList: meal.meatList,\n      sauce: meal.sauce,\n      sideDish: meal.sideDish,\n      sideDishQuantity: meal.sideDishQuantity,\n      sideDishList: meal.sideDishList,\n      drink: meal.drink,\n      obs: meal.obs,\n    });\n\n    if (this.selectedStages.length === this.stageNb) {\n      this.textCheckAll = \"Tout déselectionner\";\n    } else {\n      this.textCheckAll = \"Tout sélectionner\";\n    }\n    if (meal.collationList && meal.collationList.length > 0) {\n      const collationArray = this.dietMealForm.get(\n        \"collationList\"\n      ) as FormArray;\n      this.collationListControls = collationArray.controls.map(\n        (control) => control as FormControl\n      );\n\n      meal.collationList.forEach((collation, index) => {\n        this.collationListControls[index].setValue(collation);\n      });\n    }\n  }\n\n  onCancel() {\n    this.cancelClicked.emit;\n    console.log(\"annulation dans mealForm\");\n    this.router.navigateByUrl(`dietbook?dietId=${this.dietBookId}`);\n  }\n  openConfirmationDialog() {\n    let message =\n      \"Êtes-vous sûr de vouloir supprimer ce repas ?<br> cela entraînera la suppression définitive du repas et dans tous les semaines qui lui sont associées.\";\n    this.dialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      width: \"500px\",\n      data: { message: message },\n      panelClass: \"custom-dialog-container\",\n    });\n\n    this.dialogRef.afterClosed().subscribe((result: any) => {\n      if (result) {\n        this.mealService\n          .deleteMeal(this.mealId)\n          .pipe(\n            tap(() => {\n              this.loading = false;\n              this.messageService.showMessage(\n                \"Les Modifications sont bien enregistrées\"\n              );\n              this.router.navigateByUrl(`dietbook?dietId=${this.dietBookId}`);\n            }),\n            catchError((error) => {\n              console.error(error);\n              this.loading = false;\n              this.messageService.showErrorMessage(\n                \"Une erreur s'est produite lors de la modification.\"\n              );\n              this.errorMsg = error.message;\n              return EMPTY;\n            })\n          )\n          .subscribe();\n      }\n    });\n  }\n\n  addCollation() {\n    const newCollationControl = this.formBuilder.control(\"\");\n    this.collationListControls.push(newCollationControl);\n    (this.dietMealForm.get(\"collationList\") as FormArray).push(\n      newCollationControl\n    );\n  }\n\n  removeCollation(index: number) {\n    this.collationListControls.splice(index, 1);\n    (this.dietMealForm.get(\"collationList\") as FormArray).removeAt(index);\n  }\n\n  onSubmitForm() {\n    this.loading = true;\n    if (this.dietMealForm.value.stage !== this.selectedStages) {\n      this.dietMealForm.patchValue({ stage: [] });\n    }\n    this.dietMealForm.patchValue({\n      stage: this.selectedStages.sort((a, b) => a - b),\n    });\n    if (this.dietMealForm.value.typeMeal !== \"Collation\") {\n      this.dietMealForm.patchValue({ collation: \"\" });\n    }\n    const collationListValues = this.collationListControls.map(\n      (control) => control.value\n    );\n    console.log(collationListValues);\n    const newDietMeal = {\n      id: this.dietMealForm.get(\"id\")!.value,\n      typeMeal: this.dietMealForm.get(\"typeMeal\")!.value,\n      collation: this.dietMealForm.get(\"collation\")!.value,\n      collationList: collationListValues,\n      stage: this.dietMealForm.get(\"stage\")!.value,\n      meat: this.dietMealForm.get(\"meat\")!.value,\n      meatList: this.dietMealForm.get(\"meatList\")!.value,\n      meatQuantity: this.dietMealForm.get(\"meatQuantity\")!.value,\n      sauce: this.dietMealForm.get(\"sauce\")!.value,\n      sideDish: this.dietMealForm.get(\"sideDish\")!.value,\n      sideDishQuantity: this.dietMealForm.get(\"sideDishQuantity\")!.value,\n      sideDishList: this.dietMealForm.get(\"sideDishList\")!.value,\n      drink: this.dietMealForm.get(\"drink\")!.value,\n      obs: this.dietMealForm.get(\"obs\")!.value,\n      dietBookId: this.dietBookId,\n    };\n\n    if (this.mode === \"new\") {\n      this.mealService\n        .addMeal(newDietMeal)\n        .pipe(\n          tap(() => {\n            this.loading = false;\n            this.messageService.showMessage(\"Le repas a bien été créé\");\n            this.router.navigateByUrl(`dietbook?dietId=${this.dietBookId}`);\n          }),\n          catchError((error) => {\n            console.error(error);\n            this.loading = false;\n            this.messageService.showErrorMessage(\n              \"Une erreur est survenue lors de la création\"\n            );\n            this.errorMsg = error.message;\n            return EMPTY;\n          })\n        )\n        .subscribe();\n    } else if (this.mode === \"edit\") {\n      this.mealService\n        .modifyDietMeal(this.mealId, newDietMeal)\n        .pipe(\n          tap(() => {\n            this.loading = false;\n            this.messageService.showMessage(\"Le repas a bien été modifié\");\n            this.router.navigateByUrl(`dietbook?dietId=${this.dietBookId}`);\n          }),\n          catchError((error) => {\n            console.error(error);\n            this.loading = false;\n            this.messageService.showErrorMessage(\n              \"Une erreur est survenue lors de la modification\"\n            );\n            this.errorMsg = error.message;\n            return EMPTY;\n          })\n        )\n        .subscribe();\n    }\n  }\n}\n","<div *ngIf=\"mode\">\n  <form class=\"container-form\" [formGroup]=\"dietMealForm\">\n    <!--Section choix des repas-->\n    <div class=\"container\">\n      <label class=\"label-col1\" for=\"repas\">Repas</label>\n      <div class=\"container-input\" formControlName=\"typeMeal\">\n        <button\n          *ngFor=\"let meal of meals\"\n          (click)=\"onClickButtonMeal(meal)\"\n          [class.active]=\"selectedOption == meal\"\n          name=\"buttonMeal\"\n        >\n          {{ meal }}\n        </button>\n      </div>\n    </div>\n\n    <!--Section du choix des collation si collation est choisie-->\n    <div\n      class=\"container collation\"\n      [ngClass]=\"{\n        'fade-in': selectedOption === 'Collation',\n        hidden: selectedOption !== 'Collation'\n      }\"\n    >\n      <label class=\"label-col1\" for=\"repas\">collation </label>\n      <mat-radio-group class=\"mat-radio-button\" formControlName=\"collation\">\n        <mat-radio-button value=\"am\">AM</mat-radio-button>\n        <mat-radio-button value=\"pm1\">PM1</mat-radio-button>\n        <mat-radio-button value=\"pm2\">PM2</mat-radio-button>\n      </mat-radio-group>\n    </div>\n\n    <!--Section Semaine-->\n    <div class=\"container\">\n      <label class=\"label-col1\" for=\"stage\">Semaine</label>\n      <div class=\"container-input\">\n        <button class=\"selectButton\" (click)=\"toggleCheckAll()\">\n          {{ textCheckAll }}\n        </button>\n        <span *ngFor=\"let i of getRange(stageNb)\">\n          <input\n            type=\"checkbox\"\n            [name]=\"'stage' + i\"\n            [checked]=\"selectedStages.includes(i)\"\n            (change)=\"onCheckBoxChange(i, $event)\"\n          />\n        </span>\n      </div>\n    </div>\n\n    <!--Section saisie des données-->\n\n    <div *ngIf=\"!showMeal()\" formArrayName=\"collationList\">\n      <div\n        *ngFor=\"let collationControl of collationListControls; let i = index\"\n      >\n        <div class=\"form-group\">\n          <label for=\"collation{{ i }}\">Collation {{ i + 1 }}</label>\n          <input\n            autofocus\n            type=\"text\"\n            [formControlName]=\"'collationList' + i\"\n            appAutofocus\n          />\n          <button type=\"button\" (click)=\"removeCollation(i)\">-</button>\n        </div>\n      </div>\n\n      <!-- <div\n        *ngFor=\"let collationControl of collationListControls; let i = index; let last = last\"\n      >\n        <div class=\"form-group\">\n          <label for=\"collation{{ i }}\">Collation {{ i + 1 }}</label>\n          <input\n            [appAutofocus]=\"last\"\n            type=\"text\"\n            [formControl]=\"collationControl\"\n            formControlName=\"collationList\"\n          />\n          <button type=\"button\" (click)=\"removeCollation(i)\">-</button>\n        </div>\n      </div> -->\n      <button type=\"button\" (click)=\"addCollation()\">+</button>\n    </div>\n\n    <div *ngIf=\"showMeal()\">\n      <div class=\"container\">\n        <label class=\"label-col1\" for=\"meat\">Viande</label>\n        <div class=\"container-input\">\n          <input\n            formControlName=\"meat\"\n            class=\"input-col1\"\n            id=\"meat\"\n            type=\"text\"\n          />\n\n          <div class=\"container\">\n            <label class=\"label-col2\" for=\"meatQuantity\">Quantité Viande</label>\n            <input\n              class=\"input-col2 quantity\"\n              id=\"meatQuantity\"\n              type=\"text\"\n              formControlName=\"meatQuantity\"\n            />\n          </div>\n          <p>gr.</p>\n        </div>\n      </div>\n      <div class=\"container\">\n        <label class=\"label-col1\" for=\"meatList\">Liste des viandes</label>\n        <div class=\"container-input\">\n          <input\n            class=\"input-col3\"\n            id=\"meatList\"\n            type=\"text\"\n            formControlName=\"meatList\"\n          />\n        </div>\n      </div>\n      <div class=\"container\">\n        <label class=\"label-col1\" for=\"sauce\">Sauce</label>\n        <div class=\"container-input\">\n          <input\n            class=\"input-col1 quantity\"\n            id=\"sauce\"\n            type=\"text\"\n            formControlName=\"sauce\"\n          />\n\n          <p>CS</p>\n        </div>\n      </div>\n      <div class=\"container\">\n        <label class=\"label-col1\" for=\"sideDish\">Accompagnement</label>\n        <div class=\"container-input\">\n          <input\n            class=\"input-col1\"\n            id=\"sideDish\"\n            type=\"text\"\n            formControlName=\"sideDish\"\n          />\n\n          <label class=\"label-col2\" for=\"sideDishQuantity\">Quantité Acc.</label>\n\n          <input\n            class=\"input-col2 quantity\"\n            id=\"sideDishQuantity\"\n            type=\"text\"\n            formControlName=\"sideDishQuantity\"\n          />\n\n          <p>CS</p>\n        </div>\n      </div>\n      <div class=\"container\">\n        <label class=\"label-col1\" for=\"sideDishList\">Liste des Acc.</label>\n        <div class=\"container-input\">\n          <input\n            class=\"input-col3\"\n            id=\"sideDishList\"\n            type=\"text\"\n            formControlName=\"sideDishList\"\n          />\n        </div>\n      </div>\n      <div class=\"container\">\n        <label class=\"label-col1\" for=\"drink\">Boissons</label>\n        <div class=\"container-input\">\n          <input\n            class=\"input-col3\"\n            id=\"drink\"\n            type=\"text\"\n            formControlName=\"drink\"\n          />\n        </div>\n      </div>\n      <div class=\"container observation\">\n        <label class=\"label-col1 observation\" for=\"obs\">Observation</label>\n        <div class=\"container-input\">\n          <textarea\n            class=\"input-col3\"\n            id=\"obs\"\n            type=\"text\"\n            formControlName=\"obs\"\n          ></textarea>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"container-buttons\">\n      <div class=\"action-buttons\">\n        <button type=\"submit\" (click)=\"onCancel()\">Retour</button>\n      </div>\n      <div class=\"action-buttons\">\n        <button mat-raised-button (click)=\"openConfirmationDialog()\">\n          Supprimer\n        </button>\n      </div>\n      <div class=\"action-buttons\">\n        <button type=\"submit\" (click)=\"onSubmitForm()\">Enregistrer</button>\n      </div>\n    </div>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}