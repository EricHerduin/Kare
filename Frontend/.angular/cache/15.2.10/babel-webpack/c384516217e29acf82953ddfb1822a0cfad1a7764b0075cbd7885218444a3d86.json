{"ast":null,"code":"import { take, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.auth.isAuth$.pipe(take(1), tap(auth => {\n      if (!auth) {\n        this.router.navigate([\"/login\"]);\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAQA,SAAqBA,IAAI,EAAEC,GAAG,QAAQ,MAAM;;;;AAI5C,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,SAAI,GAAJD,IAAI;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEhEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,OAAO,IAAI,CAACJ,IAAI,CAACK,OAAO,CAACC,IAAI,CAC3BV,IAAI,CAAC,CAAC,CAAC,EACPC,GAAG,CAAEG,IAAI,IAAI;MACX,IAAI,CAACA,IAAI,EAAE;QACT,IAAI,CAACC,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAEpC,CAAC,CAAC,CACH;EACH;EAAC;qBAfUT,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAU,SAATV,SAAS;EAAA","names":["take","tap","AuthGuard","constructor","auth","router","canActivate","route","state","isAuth$","pipe","navigate","factory"],"sourceRoot":"","sources":["/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/services/auth-guard.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { Observable, take, tap } from \"rxjs\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private auth: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.auth.isAuth$.pipe(\n      take(1),\n      tap((auth) => {\n        if (!auth) {\n          this.router.navigate([\"/login\"]);\n        }\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}