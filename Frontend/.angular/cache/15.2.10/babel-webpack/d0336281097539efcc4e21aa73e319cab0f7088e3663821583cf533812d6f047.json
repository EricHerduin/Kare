{"ast":null,"code":"import { Subject, switchMap, map, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class RecipeService {\n  constructor(http, auth) {\n    this.http = http;\n    this.auth = auth;\n    this.recipes$ = new Subject();\n  }\n  getAllRecipes() {\n    return this.http.get(`http://localhost:5400/api/recipes?timestamp=${new Date().getTime()}`);\n  }\n  getRecipeById(id) {\n    return this.http.get(`http://localhost:5400/api/recipes/${id}?timestamp=${new Date().getTime()}`);\n  }\n  modifyRecipe(id, recipe) {\n    return this.http.put(`http://localhost:5400/api/recipes/modify_recipe/${id}`, recipe).pipe(catchError(error => throwError(error.error.message)));\n  }\n  addRecipe(formValue) {\n    return this.getAllRecipes().pipe(map(recipes => ({\n      ...formValue\n    })), switchMap(newRecipe => this.http.post(\"http://localhost:5400/api/recipes/add_recipe\", newRecipe)));\n  }\n  static #_ = this.ɵfac = function RecipeService_Factory(t) {\n    return new (t || RecipeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipeService,\n    factory: RecipeService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AAIA,SAAqBA,OAAO,EAAEC,SAAS,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;AACtE,SAASC,UAAU,QAAQ,gBAAgB;;;;AAK3C,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB,EAAUC,IAAiB;IAA3C,SAAI,GAAJD,IAAI;IAAsB,SAAI,GAAJC,IAAI;IAFlD,aAAQ,GAAG,IAAIR,OAAO,EAAY;EAEgC;EAElES,aAAa;IACX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAClB,+CAA+C,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,EAAE,CACtE;EACH;EAEAC,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAClB,qCAAqCI,EAAE,cAAc,IAAIH,IAAI,EAAE,CAACC,OAAO,EAAE,EAAE,CAC5E;EACH;EAEAG,YAAY,CAACD,EAAU,EAAEE,MAAc;IACrC,OAAO,IAAI,CAACT,IAAI,CACbU,GAAG,CACF,mDAAmDH,EAAE,EAAE,EACvDE,MAAM,CACP,CACAE,IAAI,CAACd,UAAU,CAAEe,KAAK,IAAKhB,UAAU,CAACgB,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;EACjE;EAEAC,SAAS,CAACC,SAWT;IACC,OAAO,IAAI,CAACb,aAAa,EAAE,CAACS,IAAI,CAC9BhB,GAAG,CAAEqB,OAAO,KAAM;MAChB,GAAGD;KACJ,CAAC,CAAC,EACHrB,SAAS,CAAEuB,SAAS,IAClB,IAAI,CAACjB,IAAI,CAACkB,IAAI,CACZ,8CAA8C,EAC9CD,SAAS,CACV,CACF,CACF;EACH;EAAC;qBAjDUnB,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAqB,SAAbrB,aAAa;IAAAsB,YAFZ;EAAM","names":["Subject","switchMap","map","throwError","catchError","RecipeService","constructor","http","auth","getAllRecipes","get","Date","getTime","getRecipeById","id","modifyRecipe","recipe","put","pipe","error","message","addRecipe","formValue","recipes","newRecipe","post","factory","providedIn"],"sourceRoot":"","sources":["/Users/ericherduin/Htag/Site Web/BD2 Konect/Frontend/src/app/services/recipe.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Recipe } from \"../models/recipe.model\";\nimport { AuthService } from \"./auth.service\";\nimport { HttpClient, HttpClientModule } from \"@angular/common/http\";\nimport { Observable, Subject, switchMap, map, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class RecipeService {\n  recipes$ = new Subject<Recipe[]>();\n\n  constructor(private http: HttpClient, private auth: AuthService) {}\n\n  getAllRecipes(): Observable<Recipe[]> {\n    return this.http.get<Recipe[]>(\n      `http://localhost:5400/api/recipes?timestamp=${new Date().getTime()}`\n    );\n  }\n\n  getRecipeById(id: string): Observable<Recipe> {\n    return this.http.get<Recipe>(\n      `http://localhost:5400/api/recipes/${id}?timestamp=${new Date().getTime()}`\n    );\n  }\n\n  modifyRecipe(id: number, recipe: Recipe) {\n    return this.http\n      .put<{ message: string }>(\n        `http://localhost:5400/api/recipes/modify_recipe/${id}`,\n        recipe\n      )\n      .pipe(catchError((error) => throwError(error.error.message)));\n  }\n\n  addRecipe(formValue: {\n    id: string;\n    title: string;\n    dietBookIds: [string];\n    ingredients: [string];\n    recipe: [string];\n    preparationTime: number;\n    breakTime: number;\n    cookingTime: number;\n    online: boolean;\n    customerId: [string];\n  }): Observable<Recipe> {\n    return this.getAllRecipes().pipe(\n      map((recipes) => ({\n        ...formValue,\n      })),\n      switchMap((newRecipe) =>\n        this.http.post<Recipe>(\n          \"http://localhost:5400/api/recipes/add_recipe\",\n          newRecipe\n        )\n      )\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}